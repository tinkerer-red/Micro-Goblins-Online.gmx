<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init global entity data

//health system
iframes = 0
invulnerable = false
damage_sources_map = ds_map_create()
is_jocky = false //this variable is used to remove weapon usage from players, and prevent any collision to an entity riding another entity
just_dismounted = false

//inputs
up    = 0
down  = 0
left  = 0
right = 0

//movement
acceleration = 0.25
max_speed = 2
spd = 0
dir = direction
self.speed = 0
self.hspeed = 0
self.vspeed = 0
self.friction = 0.0
xpreviousframe = x
ypreviousframe = y
start_x = x
start_y = y

//
in_interior = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(damage_sources_map)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// iframes handler

if (iframes &lt;= 0){
  invulnerable = false
  iframes = 0
}else{
  iframes -= 1*lag()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tick Damage Handler


if ds_exists(damage_sources_map, ds_type_map){
  //cycle through all damage sources
  var size = ds_map_size(damage_sources_map);
  
  if (size &gt; 0){
  //find the particle type
    var damage_sources_key = ds_map_find_first(damage_sources_map);
    var damage_source = damage_sources_map[? damage_sources_key];
    
    /////for each particle type
    repeat(size){
      
      if (damage_source != undefined)
      &amp;&amp; ds_exists(damage_source, ds_type_map)
      &amp;&amp; ds_map_exists(damage_source, "time")
      {
        var damage = damage_source[? "damage"];
        var time = damage_source[? "time"];
        var damage_dealer = damage_source[? "damage_dealer"];
        
        time -= 1*lag()
        damage_source[? "time"] = time
        show_debug_player("time = "+string(time))
        
        var target = self
        
        //check to see if we should even run the rest of the checks
        if (ticked_over()){
          if (instance_exists(damage_dealer)){
            with (damage_dealer){
              deal_damage(target, damage, true)
            }
          }
        }
        
        if (time &lt;= 0){
          ds_map_destroy(damage_source)
          ds_map_delete(damage_sources_map, damage_sources_key)
        }
      }
      
      var damage_sources_key = ds_map_find_next(damage_sources_map, damage_sources_key);
      var damage_source = damage_sources_map[? damage_sources_key];
      
    }//end repeat loop
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle jocky dismounting update

if (just_dismounted) just_dismounted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///disable and enable entities



///disable entity if out of bounds from all local players

//grab the max view radius
var r = obj_camera_control.max_view_radius
var max_r = r*2

var entity_x = x
var entity_y = y
var out_of_bounds_count = 0

entity_active = false;
var ent = self;

//with all players
with (obj_player){
  //grab the location
  var xx = x
  var yy = y
  var dist = point_distance(entity_x, entity_y, xx, yy)
  
  
  //find out if they are a local player
  if (player_id_local != -1){
    //find out if the entity is even with in bounds of the view
    if (dist &lt; r){
      ent.entity_active = true;
      break;
    }
  }
  
  //find out if the entity is close ish to a player, if it's not we can probable safely delete it
  //We do this for all players to prevent an object from desyncing with other players
  if (dist &gt; max_r){
    out_of_bounds_count++
  }
}

if (out_of_bounds_count = global.numberOfGlobalPlayers){
  instance_destroy(ent)
}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset movement inputs

up    = 0
down  = 0
left  = 0
right = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle movement



scr_entity_input_to_move_vector()
scr_entity_state_move()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug information

if is_visible()
&amp;&amp; global.debug
&amp;&amp; global.show_entity_data
{
  //draw the objects possition
  draw_set_color(c_white)
  draw_line(x-2, y, x+2, y)
  draw_line(x, y-2, x, y+2)
  
  //draw the object's hitbox
  draw_set_color(c_aqua)
  draw_line(bbox_left, bbox_top, bbox_right, bbox_top)
  draw_line(bbox_right, bbox_top, bbox_right, bbox_bottom)
  draw_line(bbox_left, bbox_bottom, bbox_right, bbox_bottom)
  draw_line(bbox_left, bbox_top, bbox_left, bbox_bottom)
  
  //draw the object's direction
  draw_set_color(c_red)
  var xx = x+lengthdir_x(16, direction)
  var yy = y+lengthdir_y(16, direction)
  draw_line(x, y, xx, yy)
  
  if variable_instance_exists(id, "move_dir"){
    draw_set_color(c_lime)
    var xx = x+lengthdir_x(16, move_dir)
    var yy = y+lengthdir_y(16, move_dir)
    draw_line(x, y, xx, yy)
  }
  
  
  draw_set_color(c_white)
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
