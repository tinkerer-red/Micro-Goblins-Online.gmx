<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check player count

if (variable_global_exists("numberOfLocalPlayers") = false) || (variable_global_exists("numberOfLocalPlayers") = undefined)
{
  global.numberOfLocalPlayers = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define buttons    
    ///   https://keycode.info
    
    self.keyboardLeft   = 37 //ini_read_real("keyboard", "keyboardLeft", 37); //left arrow
    self.keyboardLeft2  = 65 //ini_read_real("keyboard", "keyboardLeft2", 65); //A
    
    self.keyboardRight  = 39 //ini_read_real("keyboard", "keyboardRight", 39); //right arrow
    self.keyboardRight2 = 68 //ini_read_real("keyboard", "keyboardRight2", 68); //D
    
    self.keyboardUp     = 38 //ini_read_real("keyboard", "keyboardUp", 38); //up arrow
    self.keyboardUp2    = 87 //ini_read_real("keyboard", "keyboardUp2", 87); //W
    
    self.keyboardDown   = 40 //ini_read_real("keyboard", "keyboardDown", 40); //down arrow
    self.keyboardDown2  = 83 //ini_read_real("keyboard", "keyboardDown2", 83); //S
    
    self.keyboardAction  = 219 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardAction2 = 186 //ini_read_real("keyboard", "keyboardSelect", 13);
    
    self.keyboardItemA  = 73 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardItemA2 = 74 //ini_read_real("keyboard", "keyboardSelect", 13);
    
    self.keyboardItemB  = 79 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardItemB2 = 75 //ini_read_real("keyboard", "keyboardSelect", 13);
    
    self.keyboardItemC  = 80 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardItemC2 = 76 //ini_read_real("keyboard", "keyboardSelect", 13);
    
    self.keyboardZoomIn  = 33 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardZoomIn2 = 187 //ini_read_real("keyboard", "keyboardSelect", 13);
    
    self.keyboardZoomOut  = 34 //ini_read_real("keyboard", "keyboardSelect", 13);
    self.keyboardZoomOut2 = 189 //ini_read_real("keyboard", "keyboardSelect", 13);
    
/////////////gamepad reading start/////////////
    self.gamepadUp        = gp_padu //ini_read_real("gamepad", "gamepadUp", gp_padu);
    self.gamepadUp2       = gp_padu //ini_read_real("gamepad", "gamepadUp2", gp_padu);
    
    self.gamepadDown      = gp_padd //ini_read_real("gamepad", "gamepadDown", gp_padd);
    self.gamepadDown2     = gp_padd //ini_read_real("gamepad", "gamepadDown2", gp_padd);
    
    self.gamepadLeft      = gp_padl //ini_read_real("gamepad", "gamepadLeft", gp_padl);
    self.gamepadLeft2     = gp_padl //ini_read_real("gamepad", "gamepadLeft2", gp_padl);
    
    self.gamepadRight     = gp_padr //ini_read_real("gamepad", "gamepadRight", gp_padr);
    self.gamepadRight2    = gp_padr //ini_read_real("gamepad", "gamepadRight2", gp_padr);
    
    self.gamepadAction  = gp_face4 //ini_read_real("keyboard", "keyboardSelect", gp_face4);
    self.gamepadAction2  = gp_shoulderr //ini_read_real("keyboard", "keyboardSelect", gp_shoulderr);
    
    self.gamepadItemA    = gp_face3 //ini_read_real("gamepad", "gamepadSelect", gp_face3);
    self.gamepadItemA2    = gp_shoulderl //ini_read_real("gamepad", "gamepadSelect", gp_shoulderl);
    
    self.gamepadItemB      = gp_face1 //ini_read_real("gamepad", "gamepadExit", gp_face1);
    self.gamepadItemB2      = gp_shoulderlb //ini_read_real("gamepad", "gamepadExit", gp_shoulderlb);
    
    self.gamepadItemC      = gp_face2 //ini_read_real("gamepad", "gamepadExit", gp_face2);
    self.gamepadItemC2      = gp_shoulderrb //ini_read_real("gamepad", "gamepadExit", gp_shoulderrb);
    
    
    //self.gamepadZoomIn  = gp_axisrv
    //self.gamepadZoomOut = gp_axisrv
    
    
    
    
/*     For later use


///Load config.ini

    ini_open("config.ini")

    
    
/////////////keyboard reading start/////////////
    
    keyboardLeft          = ini_read_real("keyboard", "keyboardLeft", 37);
    keyboardLeft2         = ini_read_real("keyboard", "keyboardLeft2", 37);
    keyboardRight         = ini_read_real("keyboard", "keyboardRight", 39);
    keyboardRight2        = ini_read_real("keyboard", "keyboardRight2", 39);
    keyboardUp            = ini_read_real("keyboard", "keyboardUp", 38);
    keyboardUp2           = ini_read_real("keyboard", "keyboardUp2", 38);
    keyboardDown          = ini_read_real("keyboard", "keyboardDown", 40);
    keyboardDown2         = ini_read_real("keyboard", "keyboardDown2", 40);
    keyboardActionPrimary = ini_read_real("keyboard", "keyboardSelect", 13);
    keyboardAction1       = ini_read_real("keyboard", "keyboardSelect", 13);
    keyboardAction2       = ini_read_real("keyboard", "keyboardSelect", 13);
    keyboardAction3       = ini_read_real("keyboard", "keyboardSelect", 13);
    
/////////////keyboard reading end/////////////





/////////////gamepad reading start/////////////
    globalvar ;    
    gamepadUp        = ini_read_real("gamepad", "gamepadUp", gp_padu);
    gamepadUp2       = ini_read_real("gamepad", "gamepadUp2", gp_padu);
    gamepadDown      = ini_read_real("gamepad", "gamepadDown", gp_padd);
    gamepadDown2     = ini_read_real("gamepad", "gamepadDown2", gp_padd);
    gamepadLeft      = ini_read_real("gamepad", "gamepadLeft", gp_padl);
    gamepadLeft2     = ini_read_real("gamepad", "gamepadLeft2", gp_padl);
    gamepadRight     = ini_read_real("gamepad", "gamepadRight", gp_padr);
    gamepadRight2    = ini_read_real("gamepad", "gamepadRight2", gp_padr);
    gamepad_A    = ini_read_real("gamepad", "gamepadSelect", gp_face1);
    gamepadSelect2   = ini_read_real("gamepad", "gamepadSelect2", gp_start);
    gamepad_B      = ini_read_real("gamepad", "gamepadExit", gp_face2);
    gamepadExit2     = ini_read_real("gamepad", "gamepadExit2", gp_face2);
    gamepadTabLeft   = ini_read_real("gamepad", "gamepadTabLeft", gp_shoulderl);
    gamepadTabLeft2  = ini_read_real("gamepad", "gamepadTabLeft2", gp_shoulderlb);
    gamepadTabRight  = ini_read_real("gamepad", "gamepadTabRight", gp_shoulderr);
    gamepadTabRight2 = ini_read_real("gamepad", "gamepadTabRight2", gp_shoulderrb);
    gamepadInfo      = ini_read_real("gamepad", "gamepadInfo", gp_face4);
    gamepadInfo2     = ini_read_real("gamepad", "gamepadInfo2", gp_face4);

/////////////gamepad reading end/////////////


ini_close()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set control variables to false

var i
for (i = 0; i &lt;= 8; i++)
{
  //all axis thresholds
  gamepad_set_button_threshold(i, 0.15);
  
  //up
  self.up[i] = false
  self.up_pressed[i] = false
  self.up_held[i] = false
  self.up_timer[i] = 0
  
  //down
  self.down[i] = false
  self.down_pressed[i] = false
  self.down_held[i] = false
  self.down_timer[i] = 0
  
  //v_axis
  self.lv_axis[i] = 0
  
  //left
  self.left[i] = false
  self.left_pressed[i] = false
  self.left_held[i] = false
  self.left_timer[i] = 0
  
  //right
  self.right[i] = false
  self.right_pressed[i] = false
  self.right_held[i] = false
  self.right_timer[i] = 0
  
  //h_axis
  self.lh_axis[i] = 0
  
  //action
  self.action[i] = false
  self.action_pressed[i] = false
  self.action_held[i] = false
  self.action_timer[i] = 0
  
  //item_a
  self.item_a[i] = false
  self.item_a_pressed[i] = false
  self.item_a_held[i] = false
  self.item_a_timer[i] = 0
  
  //item_b
  self.item_b[i] = false
  self.item_b_pressed[i] = false
  self.item_b_held[i] = false
  self.item_b_timer[i] = 0
  
  //item_c
  self.item_c[i] = false
  self.item_c_pressed[i] = false
  self.item_c_held[i] = false
  self.item_c_timer[i] = 0
  
  //Zoom in
  self.zoom_in[i] = false
  self.zoom_in_pressed[i] = false
  self.zoom_in_held[i] = false
  self.zoom_in_timer[i] = 0
  
  //Zoom out
  self.zoom_out[i] = false
  self.zoom_out_pressed[i] = false
  self.zoom_out_held[i] = false
  self.zoom_out_timer[i] = 0
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Netcode
/*if variable_global_exists("htme_object")
{
  if (htme_isStarted)
  {
    mp_sync()
    
    mp_add("controls","name",buffer_s8,1);
    mp_setType("playerName",mp_type.FAST);
  }
  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//keyboard_player = 0
keyboard_player = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controls



if (window_has_focus()) &amp;&amp; (htme_isLocal())
{
  var i
  for (i = 0; i &lt;= global.numberOfLocalPlayers; i++)
  {
    if (gamepad_is_connected(i)) || (i = keyboard_player)
    {
      
      //up
      if (keyboard_check(keyboardUp) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardUp2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadUp)
      || gamepad_button_check(i, gamepadUp2)
      {
          self.gpUp[i] = true
      }else{
          self.gpUp[i] = false
      }
      
      //down
      if (keyboard_check(keyboardDown) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardDown2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadDown)
      || gamepad_button_check(i, gamepadDown2)
      {
          self.gpDown[i] = true
      }else{
          self.gpDown[i] = false
      }
      
      //left
      if (keyboard_check(keyboardLeft) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardLeft2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadLeft)
      || gamepad_button_check(i, gamepadLeft2)
      {
          self.gpLeft[i] = true
      }else{
          self.gpLeft[i] = false
      }
      
      //right
      if (keyboard_check(keyboardRight) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardRight2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadRight)
      || gamepad_button_check(i, gamepadRight2)
      {
          self.gpRight[i] = true
      }else{
          self.gpRight[i] = false
      }
      
      //action
      if (keyboard_check(keyboardAction) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardAction2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadAction)
      || gamepad_button_check(i, gamepadAction2)
      {
          self.gpAction[i] = true
      }else{
          self.gpAction[i] = false
      }
      
      //item a
      if (keyboard_check(keyboardItemA) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardItemA2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadItemA)
      || gamepad_button_check(i, gamepadItemA2)
      {
          self.gpItemA[i] = true
      }else{
          self.gpItemA[i] = false
      }
      
      //item b
      if (keyboard_check(keyboardItemB) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardItemB2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadItemB)
      || gamepad_button_check(i, gamepadItemB2)
      {
          self.gpItemB[i] = true
      }else{
          self.gpItemB[i] = false
      }
      
      //item c
      if (keyboard_check(keyboardItemC) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardItemC2) &amp;&amp; i = keyboard_player)
      || gamepad_button_check(i, gamepadItemC)
      || gamepad_button_check(i, gamepadItemC2)
      {
          self.gpItemC[i] = true
      }else{
          self.gpItemC[i] = false
      }
      
      //zoom_in
      if (keyboard_check(keyboardZoomIn) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardZoomIn2) &amp;&amp; i = keyboard_player)
      || (mouse_wheel_up() &amp;&amp; i = keyboard_player)
      || (gamepad_is_connected(i) &amp;&amp; (gamepad_axis_value(i, gp_axisrv) &lt; -0.275))
      {
          self.gpZoomIn[i] = true
      }else{
          self.gpZoomIn[i] = false
      }
      
      //zoom out
      if (keyboard_check(keyboardZoomOut) &amp;&amp; i = keyboard_player)
      || (keyboard_check(keyboardZoomOut2) &amp;&amp; i = keyboard_player)
      || (mouse_wheel_down() &amp;&amp; i = keyboard_player)
      || (gamepad_is_connected(i) &amp;&amp; (gamepad_axis_value(i, gp_axisrv) &gt; 0.275))
      {
          self.gpZoomOut[i] = true
      }else{
          self.gpZoomOut[i] = false
      }
    
    }else{
      ///*
      self.gpUp[i]      = false
      self.gpDown[i]    = false
      self.gpLeft[i]    = false
      self.gpRight[i]   = false
      self.gpAction[i]  = false
      self.gpItemA[i]   = false
      self.gpItemB[i]   = false
      self.gpItemC[i]   = false
      self.gpZoomIn[i]  = false
      self.gpZoomOut[i] = false
      //*/
    }
  }    
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///confirm controls

//controls
if (window_has_focus()) &amp;&amp; (htme_isLocal())
{
  var i
  for (i = 0; i &lt; global.numberOfLocalPlayers; i++)
  {
    if (gamepad_is_connected(i)) || (i = keyboard_player)
    {
      //up
      if (self.gpUp[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.up[i] = true) &amp;&amp; (self.up_pressed[i] = true)  { self.up_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.up[i] = false)  { self.up_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.up[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.up_timer[i]++
          self.up_timer[i] += delta_time*0.000001
          if (self.up_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.up_held[i] = true
          }else{
              self.up_held[i] = false
          }
          
      }else{
      
          self.up[i] = false
          self.up_pressed[i] = false
          self.up_held[i] = false
          self.up_timer[i] = 0
      }
      
      //down
      if (self.gpDown[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.down[i] = true) &amp;&amp; (self.down_pressed[i] = true)  { self.down_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.down[i] = false)  { self.down_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.down[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.down_timer[i]++
          self.down_timer[i] += delta_time*0.000001
          if (self.down_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.down_held[i] = true
          }
          
      }else{
      
          self.down[i] = false
          self.down_pressed[i] = false
          self.down_held[i] = false
          self.down_timer[i] = 0
      }
      
      //left
      if (self.gpLeft[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.left[i] = true) &amp;&amp; (self.left_pressed[i] = true)  { self.left_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.left[i] = false)  { self.left_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.left[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.left_timer[i]++
          self.left_timer[i] += delta_time*0.000001
          if (self.left_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.left_held[i] = true
          }
          
      }else{
      
          self.left[i] = false
          self.left_pressed[i] = false
          self.left_held[i] = false
          self.left_timer[i] = 0
      }
      
      //right
      if (self.gpRight[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.right[i] = true) &amp;&amp; (self.right_pressed[i] = true)  { self.right_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.right[i] = false)  { self.right_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.right[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.right_timer[i]++
          self.right_timer[i] += delta_time*0.000001
          if (self.right_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.right_held[i] = true
          }
          
      }else{
      
          self.right[i] = false
          self.right_pressed[i] = false
          self.right_held[i] = false
          self.right_timer[i] = 0
      }
      
      //select
      if (self.gpAction[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.action[i] = true) &amp;&amp; (self.action_pressed[i] = true)  { self.action_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.action[i] = false)  { self.action_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.action[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.action_timer[i]++
          self.action_timer[i] += delta_time*0.000001
          if (self.action_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.action_held[i] = true
          }
          
      }else{
          
          self.action[i] = false
          self.action_pressed[i] = false
          self.action_held[i] = false
          self.action_timer[i] = 0
      }
      
      //Item A
      if (self.gpItemA[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.item_a[i] = true) &amp;&amp; (self.item_a_pressed[i] = true)  { self.item_a_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.item_a[i] = false)  { self.item_a_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.item_a[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.item_a_timer[i]++
          self.item_a_timer[i] += delta_time*0.000001
          if (self.item_a_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.item_a_held[i] = true
          }
          
      }else{
      
          self.item_a[i] = false
          self.item_a_pressed[i] = false
          self.item_a_held[i] = false
          self.item_a_timer[i] = 0
      }
      
      //Item B
      if (self.gpItemB[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.item_b[i] = true) &amp;&amp; (self.item_b_pressed[i] = true)  { self.item_b_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.item_b[i] = false)  { self.item_b_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.item_b[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.item_b_timer[i]++
          self.item_b_timer[i] += delta_time*0.000001
          if (self.item_b_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.item_b_held[i] = true
          }
          
      }else{
      
          self.item_b[i] = false
          self.item_b_pressed[i] = false
          self.item_b_held[i] = false
          self.item_b_timer[i] = 0
      }
      
      
      //Item C
      if (self.gpItemC[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.item_c[i] = true) &amp;&amp; (self.item_c_pressed[i] = true)  { self.item_c_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.item_c[i] = false)  { self.item_c_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.item_c[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.item_c_timer[i]++
          self.item_c_timer[i] += delta_time*0.000001
          
          if (self.item_c_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.item_c_held[i] = true
          }
          
      }else{
      
          self.item_c[i] = false
          self.item_c_pressed[i] = false
          self.item_c_held[i] = false
          self.item_c_timer[i] = 0
      }
      
      //ZoomIn
      if (self.gpZoomIn[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.zoom_in[i] = true) &amp;&amp; (self.zoom_in_pressed[i] = true)  { self.zoom_in_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.zoom_in[i] = false)  { self.zoom_in_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.zoom_in[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.zoom_in_timer[i]++
          self.zoom_in_timer[i] += delta_time*0.000001
          
          if (self.zoom_in_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.zoom_in_held[i] = true
          }
          
      }else{
      
          self.zoom_in[i] = false
          self.zoom_in_pressed[i] = false
          self.zoom_in_held[i] = false
          self.zoom_in_timer[i] = 0
      }
      
      //ZoomOut
      if (self.gpZoomOut[i] = true)
      {
          //if the button was pressed last frame, it is no longer just pressed, but considered "active" or "down"
          if (self.zoom_out[i] = true) &amp;&amp; (self.zoom_out_pressed[i] = true)  { self.zoom_out_pressed[i] = false }
          
          // the button was not down at all last frame, and it is now, then just pressed would be true
          if (self.zoom_out[i] = false)  { self.zoom_out_pressed[i] = true }
          
          // if the button is pressed then it is stored
          self.zoom_out[i] = true
          
          //this local variable is not needed by anything else, this just stores how long the button was pressed for
          self.zoom_out_timer[i]++
          self.zoom_out_timer[i] += delta_time*0.000001
          
          if (self.zoom_out_timer[i] &gt;= (room_speed / 3))  //if it was pressed for 1/3 of a second
          {
              self.zoom_out_held[i] = true
          }
          
      }else{
      
          self.zoom_out[i] = false
          self.zoom_out_pressed[i] = false
          self.zoom_out_held[i] = false
          self.zoom_out_timer[i] = 0
      }
      
      
      if gamepad_is_connected(i)
      {
        self.lh_axis[i] = gamepad_axis_value(i, gp_axislh)
        self.lv_axis[i] = gamepad_axis_value(i, gp_axislv)
      }
      else
      {
        self.lh_axis[i] = 0
        self.lv_axis[i] = 0
      }
    
    } else {
      ///*
      self.up[i] = false
      self.up_pressed[i] = false
      self.up_held[i] = false
      self.up_timer[i] = 0
      
      self.down[i] = false
      self.down_pressed[i] = false
      self.down_held[i] = false
      self.down_timer[i] = 0
      
      self.left[i] = false
      self.left_pressed[i] = false
      self.left_held[i] = false
      self.left_timer[i] = 0
      
      self.right[i] = false
      self.right_pressed[i] = false
      self.right_held[i] = false
      self.right_timer[i] = 0
      
      self.action[i] = false
      self.action_pressed[i] = false
      self.action_held[i] = false
      self.action_timer[i] = 0
          
      self.item_a[i] = false
      self.item_a_pressed[i] = false
      self.item_a_held[i] = false
      self.item_a_timer[i] = 0
      
      self.item_b[i] = false
      self.item_b_pressed[i] = false
      self.item_b_held[i] = false
      self.item_b_timer[i] = 0
      
      self.item_c[i] = false
      self.item_c_pressed[i] = false
      self.item_c_held[i] = false
      self.item_c_timer[i] = 0
      
      self.zoom_in[i] = false
      self.zoom_in_pressed[i] = false
      self.zoom_in_held[i] = false
      self.zoom_in_timer[i] = 0
      
      self.zoom_out[i] = false
      self.zoom_out_pressed[i] = false
      self.zoom_out_held[i] = false
      self.zoom_out_timer[i] = 0
      //*/
    }
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// F5 = Restart Game

global.numberOfLocalPlayers = 0
global.numberOfGlobalPlayers = 0
draw_set_alpha(1)
draw_set_color(c_white)
game_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle fullscreen

obj_camera_control.is_fullscreened = fullscreen_toggle(true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
