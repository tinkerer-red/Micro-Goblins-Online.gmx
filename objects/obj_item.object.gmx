<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weap_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define item data


//keep track of the item's nbt data
if !variable_instance_exists(self, "nbt"){
  nbt = json_decode('{ "hue": 255.000000, "is_favorite": "true", "sub_sprite_one": 1.000000, "item_type": 0.000000, "sprite": 1.000000, "modifiers": { "scr_mod_paint": 4.000000, "scr_mod_repeater": 1.000000 }, "modifiers_string": "repeater,scr_mod_paint,scr_mod_paint,scr_mod_paint,scr_mod_paint", "count": 1.000000, "sub_sprite_two": 4.000000, "value": 0.000000, "description": "This is the description of the item", "name": "item_name" }')
}

//keep track of who dropped the item
if !variable_instance_exists(self, "item_owner"){
  item_owner = noone
}

//define the drop cooldown time, so the owner doesnt pick it up right away
//this value is in seconds
drop_cooldown = 3

collector_id = noone
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///define the floating animation offset

//we do this once so we dont have to compute it every frame for every item.
var sprite = nbt[? "sprite"]
anim_offset = (id mod 10) * (sprite_get_height(sprite)/4/10)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy the nbt data

if (nbt != noone){
  ds_map_destroy(nbt)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dont do parent object event
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update the drop cooldown timer

if (drop_cooldown &gt; 0){
  drop_cooldown -= (1/room_speed)*lag()
  if (drop_cooldown &lt;= 0){
    drop_cooldown = 0
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//allow players to pick up the item

if (drop_cooldown = 0){
  
  var col_radius = 2*one_tile
  //first find out if the owner is with in range, so incase they accidently dropped
  //  the item they can pick it back up first.
  if (item_owner != noone)
  &amp;&amp; instance_exists(item_owner)
  &amp;&amp; (item_owner.object_index = obj_player)
  &amp;&amp; point_in_circle(x, y, item_owner.x, item_owner.y, col_radius)
  {
    collector_id = item_owner
  
  }else{ //if the owner isnt there to collect
    var possible_collectors_list = instance_nearest_list(x, y, obj_player)
    
    //for every player in the list
    for (var i = 0; i &lt; ds_list_size(possible_collectors_list); i++){
      var possible_collector = possible_collectors_list[| i]
      var dist = point_distance(x, y, possible_collector.x, possible_collector.y)
      
      if (dist &lt;= col_radius){
        
        //find out if their inventory has space to even hold the item
        var player_nbt = possible_collector.nbt
        var max_slot_count = player_nbt[? "max_inventory_slots"]
        var inventory = player_nbt[? "inventory"]
        
        //if there is inventory space then pick up the item
        if (ds_list_size(inventory) &lt; max_slot_count){
          collector_id = possible_collector
        }
        
      }else{ //if the distance is further then radius nothing for the rest of the list is important
        break;
      }
    }
    
    //clean up the list
    ds_list_destroy(possible_collectors_list)
  }
  
  //if a collector has been deffined
  if (collector_id != noone){
    move_towards(collector_id.x, collector_id.y, 4)
    
    //if close enough to the player then put it into the players inventory
    if (point_distance(x, y, collector_id.x, collector_id.y) &lt; 4){
      
      item_give_player(collector_id, nbt)
      nbt = noone
      
      //destroy the item
      instance_destroy()
    }
    
    
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dont do parent object movement
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dont do parent object movement
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self floating on ground

if is_visible(){
  var hue = nbt[? "hue"]
  var sprite = nbt[? "sprite"]
  
  var xx = x;
  var yy = wave(0, sprite_get_height(sprite)/4, 1.5, anim_offset)+y;
  
  shader_set_hue(hue)
  draw_sprite_ext(sprite, 0, xx, yy, 0.5, 0.5, 0, c_white, 1)
  shader_reset()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
