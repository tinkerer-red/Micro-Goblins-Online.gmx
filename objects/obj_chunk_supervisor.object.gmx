<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chunk_supervisor</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Chunks
chunk_init(256, 3)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Auto Tile System Init (ats_init)

// Specifies a z (depth) for the different tiles in form of a DS priority to pass over to the ats_init function below.
var priority = ds_priority_create();
ds_priority_add(priority, spr_tile_air, 0);
ds_priority_add(priority, spr_tile_sand_final, 1);
ds_priority_add(priority, spr_tile_grass_final, -1);
ds_priority_add(priority, spr_tile_rock_final, -2);
ds_priority_add(priority, spr_tile_high_rock_final, -3);
ds_priority_add(priority, spr_tile_snow_final, -4);
ds_priority_add(priority, spr_tile_dungeon, -5);

// Initializes the Autotiling Tilemap Shaders extension (go to the script for more information).
ats_init(tile_size, tile_size, priority, 8);

// The DS priority is only temporary, so we can destroy it after the extension is initialized.
ds_priority_destroy(priority);

// Creates an ATS rectangle. This is an instance that visualizes tiles over a rectangular area.
ats_rectangle = ats_rectangle_create(chunk_width / tile_size+2, chunk_height / tile_size+2, false);

// Creates a grid for holding the sprites used for the tiles.
ats_grid = ds_grid_create(chunk_width / tile_size+2, chunk_height / tile_size+2);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// /* Init Auto Save

//alarm_set(0, room_speed*60*2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Netcode //buffer_f16 isn't supported

///destroy self if there is more then one

if(variable_global_exists("htme_object")){
  if htme_isServer(){
    htme_globalSet("seed",self.world_seed,buffer_u32);
    
    //encode world data
    var world_map_string = ds_map_write(world_map)
    //var active_chunks_string = ds_map_write(active_chunks)
    //var active_interior_chunks_string = ds_map_write(active_interior_chunks)
    
    htme_globalSet("world_map_string",world_map_string,buffer_string);
    //htme_globalSet("seed",self.world_seed,buffer_u32);
    //htme_globalSet("seed",self.world_seed,buffer_u32);
    
    
  }else{ //if not the server
    
    self.world_seed = htme_globalGet("seed")
    
    //encode world data
    var world_map_string = htme_globalGet("world_map_string");
    
    ds_map_read(world_map, world_map_string)
    //var active_chunks_string = ds_map_write(active_chunks)
    //var active_interior_chunks_string = ds_map_write(active_interior_chunks)
    
    
    //htme_globalSet("seed",self.world_seed,buffer_u32);
    //htme_globalSet("seed",self.world_seed,buffer_u32);
    
    
  }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///[Debug] Show Chunks init

show_chunks = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///World Name
// Example: "Worlds\"+string(world_name)+"\"+string(cell_x)+","+string(cell_y)+".chnk"
// Example: "Worlds\World123\-10,12.chnk"
world_name = "World1"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// /* Save every 2 minutes.
/*
if (global.chunk_handler.chunk_saved_this_frame = false){
  global.chunk_handler.chunk_saved_this_frame = true
  
  var _filename = "Worlds\"+string(world_name)+".map"
  file_save_map(_filename, world_map)
  show_debug_message("World Map Saved.")
  
  alarm_set(0, room_speed*60*2)
}else{
  alarm_set(0, 1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload/Load cells

var player_count = instance_number(obj_player)
for (var i = 0; i &lt; player_count; i++){
  var player = instance_find(obj_player,i);
  
  if (player.player_id_local != -1){
    
    if (player.x div chunk_width) != (player.xprevious div chunk_width)
    || (player.y div chunk_height) != (player.yprevious div chunk_height)
    || sign(player.x) != sign(player.xprevious)
    || sign(player.y) != sign(player.yprevious) {
      
//      timer_start()
      chunk_uncall_region(player.xprevious, player.yprevious)
//      timer_end()
//      timer_start()
      chunk_call_region(player.x, player.y)
//      timer_end()
    }
  }
}
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update saving/loading variables

chunk_loaded_this_frame = false;
chunk_gen_this_frame = false;
chunk_saved_this_frame = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug temp

show_debug_player(0, "world_seed: "+string(world_seed))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update chunk_water_surface_drawn_this_frame

chunk_water_surface_drawn_this_frame = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// /* Saving
/*
//if ds_exists(async_load, ds_type_map){
if (async_load[? "status"] = 1) {
  
  var buff = ds_priority_find_priority(global.chunk_handler.saving_async, async_load[? "id"]);
  
  show_debug_message('async_load[? "id"] = '+string(async_load[? "id"]))
  show_debug_message('buff = '+string(buff))
  
  if (buff != undefined) {
    ds_priority_delete_value(global.chunk_handler.saving_async, async_load[? "id"])
    buffer_delete(buff)
    show_debug_message("buffer deleted")
    // just to help make sure memory leaks dont happen, though this shouldnt be needed
    //if ds_priority_empty(global.chunk_handler.saving_async){
    //  ds_priority_destroy(global.chunk_handler.saving_async)
    //  global.chunk_handler.saving_async = ds_priority_create()
    //}
    
    
//    ds_map_destroy(async_load)
  }else{
//    ds_map_destroy(async_load)
  }
}
//}
show_debug_message("prior size = "+string(ds_priority_size(global.chunk_handler.saving_async)))
show_debug_message("===============")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(active_chunks)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Memory

event_user(15)
ats_free()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// /* Save at game end
/*
with (obj_chunk){
  chunk_uncall_forced()
}

var _filename = "Worlds\"+string(world_name)+".map"
file_save_map(_filename, world_map)



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Memory

event_user(15)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
