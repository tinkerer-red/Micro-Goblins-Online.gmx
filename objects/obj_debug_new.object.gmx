<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_debug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG OPTIONS
global.debug = true
global.show_entity_data = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controller [cbData]

///init
draw_set_font(global.font_menu);
update_debug = false;

x = 0;
y = 0;

//this array is re used many many times in this script to be used as a list of argumnets needed for changing the count of any modifier
//var array;

//guid = gui_create_gui();

//gui_create_string(guid, "text", "Debug Controller", c_white);
scr_cbDataGUI_create()
scr_cbDataGUI_set_gui_width(245*1.2) //245 is the default min value

scr_cbDataGUI_use_presets(true)
scr_cbDataGUI_auto_save_presets(true)


//gui_create_menu(guid, "Modifiers", false, 64, c_black);
gui_folder_modifiers = scr_cbDataGUI_add_folder("Modifiers")

  
  //gui_create_menu(guid, "Global", false, 10, c_aqua);
  gui_folder_modifiers_global = scr_cbDataGUI_add_folder("Global", gui_folder_modifiers)
    
    
    
    //gui_create_slider(guid, "AOE", 0, 0, 5, c_aqua)
    scr_cbDataGUI_add(self, "AOE", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "AOE", 0, 5)
    scr_cbDataGUI_set_step(self, "AOE", 1)
    scr_cbDataGUI_set_value(self, "AOE", 0)
    scr_cbDataGUI_set_tooltip(self, "AOE", "This is a tooltip")
    
    //gui_create_slider(guid, "Continuous", 0, 0, 5, c_purple)
    scr_cbDataGUI_add(self, "Continuous", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Continuous", 0, 5)
    scr_cbDataGUI_set_step(self, "Continuous", 1)
    scr_cbDataGUI_set_value(self, "Continuous", 0)
    scr_cbDataGUI_set_tooltip(self, "Continuous", "This is a tooltip")
    
    //gui_create_slider(guid, "Charge", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Charge", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Charge", 0, 5)
    scr_cbDataGUI_set_step(self, "Charge", 1)
    scr_cbDataGUI_set_value(self, "Charge", 0)
    scr_cbDataGUI_set_tooltip(self, "Charge", "This is a tooltip")
    
    //gui_create_slider(guid, "Repeater", 0, 0, 5, c_orange)
    scr_cbDataGUI_add(self, "Repeater", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Repeater", 0, 5)
    scr_cbDataGUI_set_step(self, "Repeater", 1)
    scr_cbDataGUI_set_value(self, "Repeater", 0)
    scr_cbDataGUI_set_tooltip(self, "Repeater", "This is a tooltip")
    
    //gui_create_slider(guid, "Dash", 0, 0, 5, c_yellow)
    scr_cbDataGUI_add(self, "Dash", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Dash", 0, 5)
    scr_cbDataGUI_set_step(self, "Dash", 1)
    scr_cbDataGUI_set_value(self, "Dash", 0)
    scr_cbDataGUI_set_tooltip(self, "Dash", "This is a tooltip")
    
    //gui_create_slider(guid, "Evade", 0, 0, 5, c_green)
    scr_cbDataGUI_add(self, "Evade", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Evade", 0, 5)
    scr_cbDataGUI_set_step(self, "Evade", 1)
    scr_cbDataGUI_set_value(self, "Evade", 0)
    scr_cbDataGUI_set_tooltip(self, "Evade", "This is a tooltip")
    
    //gui_create_slider(guid, "Enlarge", 0, 0, 5, c_blue)
    scr_cbDataGUI_add(self, "Enlarge", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Enlarge", 0, 5)
    scr_cbDataGUI_set_step(self, "Enlarge", 1)
    scr_cbDataGUI_set_value(self, "Enlarge", 0)
    scr_cbDataGUI_set_tooltip(self, "Enlarge", "This is a tooltip")
    
    //gui_create_slider(guid, "Shrink", 0, 0, 5, c_aqua)
    scr_cbDataGUI_add(self, "Shrink", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Shrink", 0, 5)
    scr_cbDataGUI_set_step(self, "Shrink", 1)
    scr_cbDataGUI_set_value(self, "Shrink", 0)
    scr_cbDataGUI_set_tooltip(self, "Shrink", "This is a tooltip")
    
    //gui_create_slider(guid, "Aim_Bot", 0, 0, 5, c_purple)
    scr_cbDataGUI_add(self, "Aim_Bot", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Aim_Bot", 0, 5)
    scr_cbDataGUI_set_step(self, "Aim_Bot", 1)
    scr_cbDataGUI_set_value(self, "Aim_Bot", 0)
    scr_cbDataGUI_set_tooltip(self, "Aim_Bot", "This is a tooltip")
    
    //gui_create_slider(guid, "Knockback", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Knockback", cbData_type.number, gui_folder_modifiers_global)
    scr_cbDataGUI_set_range(self, "Knockback", 0, 5)
    scr_cbDataGUI_set_step(self, "Knockback", 1)
    scr_cbDataGUI_set_value(self, "Knockback", 0)
    scr_cbDataGUI_set_tooltip(self, "Knockback", "This is a tooltip")
    
    
  //gui_create_menu(guid, "Melee", false, 10, c_green);
  gui_folder_modifiers_melee = scr_cbDataGUI_add_folder("Melee", gui_folder_modifiers)
  
  
    //gui_create_slider(guid, "Slash", 0, 0, 5, c_red);
    scr_cbDataGUI_add(self, "Slash", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Slash", 0, 5)
    scr_cbDataGUI_set_step(self, "Slash", 1)
    scr_cbDataGUI_set_value(self, "Slash", 0)
    scr_cbDataGUI_set_tooltip(self, "Slash", "This is a tooltip")
    
    //gui_create_slider(guid, "Thrust", 0, 0, 5, c_orange);
    scr_cbDataGUI_add(self, "Thrust", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Thrust", 0, 5)
    scr_cbDataGUI_set_step(self, "Thrust", 1)
    scr_cbDataGUI_set_value(self, "Thrust", 0)
    scr_cbDataGUI_set_tooltip(self, "Thrust", "This is a tooltip")
    
    //gui_create_slider(guid, "Chained", 0, 0, 5, c_yellow);
    scr_cbDataGUI_add(self, "Chained", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Chained", 0, 5)
    scr_cbDataGUI_set_step(self, "Chained", 1)
    scr_cbDataGUI_set_value(self, "Chained", 0)
    scr_cbDataGUI_set_tooltip(self, "Chained", "This is a tooltip")
    
    //gui_create_slider(guid, "Melee_Ranged", 0, 0, 5, c_green);
    scr_cbDataGUI_add(self, "Melee_Ranged", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Melee_Ranged", 0, 5)
    scr_cbDataGUI_set_step(self, "Melee_Ranged", 1)
    scr_cbDataGUI_set_value(self, "Melee_Ranged", 0)
    scr_cbDataGUI_set_tooltip(self, "Melee_Ranged", "This is a tooltip")
    
    //gui_create_slider(guid, "Swiftness", 0, 0, 5, c_blue);
    scr_cbDataGUI_add(self, "Swiftness", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Swiftness", 0, 5)
    scr_cbDataGUI_set_step(self, "Swiftness", 1)
    scr_cbDataGUI_set_value(self, "Swiftness", 0)
    scr_cbDataGUI_set_tooltip(self, "Swiftness", "This is a tooltip")
    
    //gui_create_slider(guid, "Slowness", 0, 0, 5, c_aqua);
    scr_cbDataGUI_add(self, "Slowness", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Slowness", 0, 5)
    scr_cbDataGUI_set_step(self, "Slowness", 1)
    scr_cbDataGUI_set_value(self, "Slowness", 0)
    scr_cbDataGUI_set_tooltip(self, "Slowness", "This is a tooltip")
    
    //gui_create_slider(guid, "Back_Stab", 0, 0, 5, c_purple);
    scr_cbDataGUI_add(self, "Back_Stab", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Back_Stab", 0, 5)
    scr_cbDataGUI_set_step(self, "Back_Stab", 1)
    scr_cbDataGUI_set_value(self, "Back_Stab", 0)
    scr_cbDataGUI_set_tooltip(self, "Back_Stab", "This is a tooltip")
    
    //gui_create_slider(guid, "Flail", 0, 0, 5, c_red);
    scr_cbDataGUI_add(self, "Flail", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Flail", 0, 5)
    scr_cbDataGUI_set_step(self, "Flail", 1)
    scr_cbDataGUI_set_value(self, "Flail", 0)
    scr_cbDataGUI_set_tooltip(self, "Flail", "This is a tooltip")
    
    //gui_create_slider(guid, "Moveable", 0, 0, 5, c_orange);
    scr_cbDataGUI_add(self, "Moveable", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Moveable", 0, 5)
    scr_cbDataGUI_set_step(self, "Moveable", 1)
    scr_cbDataGUI_set_value(self, "Moveable", 0)
    scr_cbDataGUI_set_tooltip(self, "Moveable", "This is a tooltip")
    
    //gui_create_slider(guid, "Extend", 0, 0, 5, c_yellow);
    scr_cbDataGUI_add(self, "Extend", cbData_type.number, gui_folder_modifiers_melee)
    scr_cbDataGUI_set_range(self, "Extend", 0, 5)
    scr_cbDataGUI_set_step(self, "Extend", 1)
    scr_cbDataGUI_set_value(self, "Extend", 0)
    scr_cbDataGUI_set_tooltip(self, "Extend", "This is a tooltip")
    
    
  //gui_create_menu(guid, "Ranged", false, 17, c_orange);
  gui_folder_modifiers_ranged = scr_cbDataGUI_add_folder("Ranged", gui_folder_modifiers)
  
    
    //gui_create_slider(guid, "Sticky", 0, 0, 5, c_purple)
    scr_cbDataGUI_add(self, "Sticky", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Sticky", 0, 5)
    scr_cbDataGUI_set_step(self, "Sticky", 1)
    scr_cbDataGUI_set_value(self, "Sticky", 0)
    scr_cbDataGUI_set_tooltip(self, "Sticky", "This is a tooltip")
    
    //gui_create_slider(guid, "Bonus_Shot", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Bonus_Shot", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Bonus_Shot", 0, 5)
    scr_cbDataGUI_set_step(self, "Bonus_Shot", 1)
    scr_cbDataGUI_set_value(self, "Bonus_Shot", 0)
    scr_cbDataGUI_set_tooltip(self, "Bonus_Shot", "This is a tooltip")
    
    //gui_create_slider(guid, "Mirror_Shot", 0, 0, 5, c_orange)
    scr_cbDataGUI_add(self, "Mirror_Shot", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Mirror_Shot", 0, 5)
    scr_cbDataGUI_set_step(self, "Mirror_Shot", 1)
    scr_cbDataGUI_set_value(self, "Mirror_Shot", 0)
    scr_cbDataGUI_set_tooltip(self, "Mirror_Shot", "This is a tooltip")
    
    //gui_create_slider(guid, "Multi_Shot", 0, 0, 5, c_yellow)
    scr_cbDataGUI_add(self, "Multi_Shot", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Multi_Shot", 0, 5)
    scr_cbDataGUI_set_step(self, "Multi_Shot", 1)
    scr_cbDataGUI_set_value(self, "Multi_Shot", 0)
    scr_cbDataGUI_set_tooltip(self, "Multi_Shot", "This is a tooltip")
    
    //gui_create_slider(guid, "Burst", 0, 0, 5, c_green)
    scr_cbDataGUI_add(self, "Burst", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Burst", 0, 5)
    scr_cbDataGUI_set_step(self, "Burst", 1)
    scr_cbDataGUI_set_value(self, "Burst", 0)
    scr_cbDataGUI_set_tooltip(self, "Burst", "This is a tooltip")
    
    //gui_create_slider(guid, "Inaccurate", 0, 0, 5, c_teal)
    scr_cbDataGUI_add(self, "Inaccurate", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Inaccurate", 0, 5)
    scr_cbDataGUI_set_step(self, "Inaccurate", 1)
    scr_cbDataGUI_set_value(self, "Inaccurate", 0)
    scr_cbDataGUI_set_tooltip(self, "Inaccurate", "This is a tooltip")
    
    //gui_create_slider(guid, "Cluster", 0, 0, 5, c_blue)
    scr_cbDataGUI_add(self, "Cluster", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Cluster", 0, 5)
    scr_cbDataGUI_set_step(self, "Cluster", 1)
    scr_cbDataGUI_set_value(self, "Cluster", 0)
    scr_cbDataGUI_set_tooltip(self, "Cluster", "This is a tooltip")
    
    //gui_create_slider(guid, "Boomerang", 0, 0, 5, c_purple)
    scr_cbDataGUI_add(self, "Boomerang", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Boomerang", 0, 5)
    scr_cbDataGUI_set_step(self, "Boomerang", 1)
    scr_cbDataGUI_set_value(self, "Boomerang", 0)
    scr_cbDataGUI_set_tooltip(self, "Boomerang", "This is a tooltip")
    
    //gui_create_slider(guid, "Nega_Rang", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Nega_Rang", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Nega_Rang", 0, 5)
    scr_cbDataGUI_set_step(self, "Nega_Rang", 1)
    scr_cbDataGUI_set_value(self, "Nega_Rang", 0)
    scr_cbDataGUI_set_tooltip(self, "Nega_Rang", "This is a tooltip")
    
    //gui_create_slider(guid, "Ricochet", 0, 0, 5, c_orange)
    scr_cbDataGUI_add(self, "Ricochet", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Ricochet", 0, 5)
    scr_cbDataGUI_set_step(self, "Ricochet", 1)
    scr_cbDataGUI_set_value(self, "Ricochet", 0)
    scr_cbDataGUI_set_tooltip(self, "Ricochet", "This is a tooltip")
    
    //gui_create_slider(guid, "Seeking", 0, 0, 5, c_yellow)
    scr_cbDataGUI_add(self, "Seeking", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Seeking", 0, 5)
    scr_cbDataGUI_set_step(self, "Seeking", 1)
    scr_cbDataGUI_set_value(self, "Seeking", 0)
    scr_cbDataGUI_set_tooltip(self, "Seeking", "This is a tooltip")
    
    //gui_create_slider(guid, "Guiding", 0, 0, 5, c_green)
    scr_cbDataGUI_add(self, "Guiding", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Guiding", 0, 5)
    scr_cbDataGUI_set_step(self, "Guiding", 1)
    scr_cbDataGUI_set_value(self, "Guiding", 0)
    scr_cbDataGUI_set_tooltip(self, "Guiding", "This is a tooltip")
    
    //gui_create_slider(guid, "Laser", 0, 0, 5, c_teal)
    scr_cbDataGUI_add(self, "Laser", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Laser", 0, 5)
    scr_cbDataGUI_set_step(self, "Laser", 1)
    scr_cbDataGUI_set_value(self, "Laser", 0)
    scr_cbDataGUI_set_tooltip(self, "Laser", "This is a tooltip")
    
    //gui_create_slider(guid, "Targeting", 0, 0, 5, c_blue)
    scr_cbDataGUI_add(self, "Targeting", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Targeting", 0, 5)
    scr_cbDataGUI_set_step(self, "Targeting", 1)
    scr_cbDataGUI_set_value(self, "Targeting", 0)
    scr_cbDataGUI_set_tooltip(self, "Targeting", "This is a tooltip")
    
    //gui_create_slider(guid, "Air_Strike", 0, 0, 5, c_purple)
    scr_cbDataGUI_add(self, "Air_Strike", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Air_Strike", 0, 5)
    scr_cbDataGUI_set_step(self, "Air_Strike", 1)
    scr_cbDataGUI_set_value(self, "Air_Strike", 0)
    scr_cbDataGUI_set_tooltip(self, "Air_Strike", "This is a tooltip")
    
    //gui_create_slider(guid, "Arc_Lightning", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Arc_Lightning", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Arc_Lightning", 0, 5)
    scr_cbDataGUI_set_step(self, "Arc_Lightning", 1)
    scr_cbDataGUI_set_value(self, "Arc_Lightning", 0)
    scr_cbDataGUI_set_tooltip(self, "Arc_Lightning", "This is a tooltip")
    
    //gui_create_slider(guid, "Quick_Scope", 0, 0, 5, c_orange)
    scr_cbDataGUI_add(self, "Quick_Scope", cbData_type.number, gui_folder_modifiers_ranged)
    scr_cbDataGUI_set_range(self, "Quick_Scope", 0, 5)
    scr_cbDataGUI_set_step(self, "Quick_Scope", 1)
    scr_cbDataGUI_set_value(self, "Quick_Scope", 0)
    scr_cbDataGUI_set_tooltip(self, "Quick_Scope", "This is a tooltip")
    
    
    
  //gui_create_menu(guid, "Summon", false, 18, c_green);
  gui_folder_modifiers_summon = scr_cbDataGUI_add_folder("Summon", gui_folder_modifiers)
    
    ////////////////////////////////////////////////////////
    //gui_create_menu(guid, "Movement", false, 4, c_blue);
    gui_folder_modifiers_summon_movement = scr_cbDataGUI_add_folder("Movement", gui_folder_modifiers_summon)
    
      
      //gui_create_slider(guid, "Default_Movement", 0, 0, 5, c_red)
      scr_cbDataGUI_add(self, "Default_Movement", cbData_type.number, gui_folder_modifiers_summon_movement)
      scr_cbDataGUI_set_range(self, "Default_Movement", 0, 5)
      scr_cbDataGUI_set_step(self, "Default_Movement", 1)
      scr_cbDataGUI_set_value(self, "Default_Movement", 0)
      scr_cbDataGUI_set_tooltip(self, "Default_Movement", "This is a tooltip")
      
      //gui_create_slider(guid, "Orbital", 0, 0, 5, c_orange)
      scr_cbDataGUI_add(self, "Orbital", cbData_type.number, gui_folder_modifiers_summon_movement)
      scr_cbDataGUI_set_range(self, "Orbital", 0, 5)
      scr_cbDataGUI_set_step(self, "Orbital", 1)
      scr_cbDataGUI_set_value(self, "Orbital", 0)
      scr_cbDataGUI_set_tooltip(self, "Orbital", "This is a tooltip")
      
      //gui_create_slider(guid, "Chained_Movement", 0, 0, 5, c_yellow)
      scr_cbDataGUI_add(self, "Chained_Movement", cbData_type.number, gui_folder_modifiers_summon_movement)
      scr_cbDataGUI_set_range(self, "Chained_Movement", 0, 5)
      scr_cbDataGUI_set_step(self, "Chained_Movement", 1)
      scr_cbDataGUI_set_value(self, "Chained_Movement", 0)
      scr_cbDataGUI_set_tooltip(self, "Chained_Movement", "This is a tooltip")
      
      //gui_create_slider(guid, "Jumpy", 0, 0, 5, c_orange)
      scr_cbDataGUI_add(self, "Jumpy", cbData_type.number, gui_folder_modifiers_summon_movement)
      scr_cbDataGUI_set_range(self, "Jumpy", 0, 5)
      scr_cbDataGUI_set_step(self, "Jumpy", 1)
      scr_cbDataGUI_set_value(self, "Jumpy", 0)
      scr_cbDataGUI_set_tooltip(self, "Jumpy", "This is a tooltip")
      
      
    ////////////////////////////////////////////////////////
    //gui_create_menu(guid, "Attack", false, 4, c_red);
    gui_folder_modifiers_summon_attack = scr_cbDataGUI_add_folder("Attack", gui_folder_modifiers_summon)
      
      //gui_create_slider(guid, "Leap", 0, 0, 5, c_yellow)
      scr_cbDataGUI_add(self, "Leap", cbData_type.number, gui_folder_modifiers_summon_attack)
      scr_cbDataGUI_set_range(self, "Leap", 0, 5)
      scr_cbDataGUI_set_step(self, "Leap", 1)
      scr_cbDataGUI_set_value(self, "Leap", 0)
      scr_cbDataGUI_set_tooltip(self, "Leap", "This is a tooltip")
      
      //gui_create_slider(guid, "Stomp", 0, 0, 5, c_green)
      scr_cbDataGUI_add(self, "Stomp", cbData_type.number, gui_folder_modifiers_summon_attack)
      scr_cbDataGUI_set_range(self, "Stomp", 0, 5)
      scr_cbDataGUI_set_step(self, "Stomp", 1)
      scr_cbDataGUI_set_value(self, "Stomp", 0)
      scr_cbDataGUI_set_tooltip(self, "Stomp", "This is a tooltip")
      
      //gui_create_slider(guid, "Hasten", 0, 0, 5, c_blue)
      scr_cbDataGUI_add(self, "Hasten", cbData_type.number, gui_folder_modifiers_summon_attack)
      scr_cbDataGUI_set_range(self, "Hasten", 0, 5)
      scr_cbDataGUI_set_step(self, "Hasten", 1)
      scr_cbDataGUI_set_value(self, "Hasten", 0)
      scr_cbDataGUI_set_tooltip(self, "Hasten", "This is a tooltip")
      
      //gui_create_slider(guid, "Kamikaze", 0, 0, 5, c_purple)
      scr_cbDataGUI_add(self, "Kamikaze", cbData_type.number, gui_folder_modifiers_summon_attack)
      scr_cbDataGUI_set_range(self, "Kamikaze", 0, 5)
      scr_cbDataGUI_set_step(self, "Kamikaze", 1)
      scr_cbDataGUI_set_value(self, "Kamikaze", 0)
      scr_cbDataGUI_set_tooltip(self, "Kamikaze", "This is a tooltip")
      
      
    ////////////////////////////////////////////////////////
    //gui_create_menu(guid, "Health", false, 5, c_green);
    gui_folder_modifiers_summon_health = scr_cbDataGUI_add_folder("Health", gui_folder_modifiers_summon)
    
      
      //gui_create_slider(guid, "Default_Health", 0, 0, 5, c_yellow)
      scr_cbDataGUI_add(self, "Default_Health", cbData_type.number, gui_folder_modifiers_summon_health)
      scr_cbDataGUI_set_range(self, "Default_Health", 0, 5)
      scr_cbDataGUI_set_step(self, "Default_Health", 1)
      scr_cbDataGUI_set_value(self, "Default_Health", 0)
      scr_cbDataGUI_set_tooltip(self, "Default_Health", "This is a tooltip")
      
      //gui_create_slider(guid, "Stout", 0, 0, 5, c_green)
      scr_cbDataGUI_add(self, "Stout", cbData_type.number, gui_folder_modifiers_summon_health)
      scr_cbDataGUI_set_range(self, "Stout", 0, 5)
      scr_cbDataGUI_set_step(self, "Stout", 1)
      scr_cbDataGUI_set_value(self, "Stout", 0)
      scr_cbDataGUI_set_tooltip(self, "Stout", "This is a tooltip")
      
      //gui_create_slider(guid, "Enlarged", 0, 0, 5, c_blue)
      scr_cbDataGUI_add(self, "Enlarged", cbData_type.number, gui_folder_modifiers_summon_health)
      scr_cbDataGUI_set_range(self, "Enlarged", 0, 5)
      scr_cbDataGUI_set_step(self, "Enlarged", 1)
      scr_cbDataGUI_set_value(self, "Enlarged", 0)
      scr_cbDataGUI_set_tooltip(self, "Enlarged", "This is a tooltip")
      
      //gui_create_slider(guid, "Timed", 0, 0, 5, c_purple)
      scr_cbDataGUI_add(self, "Timed", cbData_type.number, gui_folder_modifiers_summon_health)
      scr_cbDataGUI_set_range(self, "Timed", 0, 5)
      scr_cbDataGUI_set_step(self, "Timed", 1)
      scr_cbDataGUI_set_value(self, "Timed", 0)
      scr_cbDataGUI_set_tooltip(self, "Timed", "This is a tooltip")
      
      //gui_create_slider(guid, "Multiply", 0, 0, 5, c_red)
      scr_cbDataGUI_add(self, "Multiply", cbData_type.number, gui_folder_modifiers_summon_health)
      scr_cbDataGUI_set_range(self, "Multiply", 0, 5)
      scr_cbDataGUI_set_step(self, "Multiply", 1)
      scr_cbDataGUI_set_value(self, "Multiply", 0)
      scr_cbDataGUI_set_tooltip(self, "Multiply", "This is a tooltip")
      
      
    //gui_create_menu(guid, "Passive", false, 1, c_yellow);
    gui_folder_modifiers_summon_passive = scr_cbDataGUI_add_folder("Passive", gui_folder_modifiers_summon)
    
      
      //gui_create_slider(guid, "Mount", 0, 0, 5, c_green)
      scr_cbDataGUI_add(self, "Mount", cbData_type.number, gui_folder_modifiers_summon_passive)
      scr_cbDataGUI_set_range(self, "Mount", 0, 5)
      scr_cbDataGUI_set_step(self, "Mount", 1)
      scr_cbDataGUI_set_value(self, "Mount", 0)
      scr_cbDataGUI_set_tooltip(self, "Mount", "This is a tooltip")
      
        
  //gui_create_menu(guid, "Toy_Mods", false, 1, c_fuchsia);
  gui_folder_modifiers_toy = scr_cbDataGUI_add_folder("Toy_Mods", gui_folder_modifiers)
  
    
    //gui_create_slider(guid, "Paint", 0, 0, 5, c_red)
    scr_cbDataGUI_add(self, "Paint", cbData_type.number, gui_folder_modifiers_toy)
    scr_cbDataGUI_set_range(self, "Paint", 0, 5)
    scr_cbDataGUI_set_step(self, "Paint", 1)
    scr_cbDataGUI_set_value(self, "Paint", 0)
    scr_cbDataGUI_set_tooltip(self, "Paint", "This is a tooltip")
    
  
  //gui_create_menu(guid, "Random", false, 2, c_purple);
  gui_folder_modifiers_random = scr_cbDataGUI_add_folder("Random", gui_folder_modifiers)
  
    
    //gui_create_slider(guid, "Random_Mod_Count", 0, 0, 5, c_fuchsia)
    scr_cbDataGUI_add(self, "Random_Mod_Count", cbData_type.number, gui_folder_modifiers_random)
    scr_cbDataGUI_set_range(self, "Random_Mod_Count", 0, 10)
    scr_cbDataGUI_set_step(self, "Random_Mod_Count", 1)
    scr_cbDataGUI_set_value(self, "Random_Mod_Count", 0)
    scr_cbDataGUI_set_tooltip(self, "Random_Mod_Count", "This is a tooltip")
    
    //gui_create_button(guid, "Randomize_Mods", scr_randomize_modifiers, c_lime);
    scr_cbDataGUI_add(self, "Randomize_Mods", cbData_type.function, gui_folder_modifiers_random)
    scr_cbDataGUI_set_tooltip(self, "Randomize_Mods", "This is a tooltip")
    var Random_Mod_Count_array;
    Random_Mod_Count_array[0] = scr_cbDataGUI_get_value(self, "Random_Mod_Count")
    scr_cbDataGUI_set_on_change_cb(self, "Random_Mod_Count", scr_randomize_modifiers, Random_Mod_Count_array)
    
    
    
    
    
  
  /// Player Values
  //gui_create_menu(guid, "Player", false, 2, c_green);
  gui_folder_player = scr_cbDataGUI_add_folder("Player")
  
    
    //scr_cbDataGUI_set_on_change_cb()
    //gui_create_button(guid, "Player_Name", debugger_get_player_name, c_white)
    var player_names;
    player_names[0] = "Default"
    player_names[1] = "Red"
    player_names[2] = "Arma"
    player_names[3] = "Olaf"
    player_names[4] = "Shiv"
    player_names[5] = "nostud thiago"
    //player_names[6] = ""
    //player_names[7] = ""
    
    scr_cbDataGUI_add(self, "Player_Name", cbData_type.text, gui_folder_player, player_names)
    scr_cbDataGUI_set_value(self, "Player_Name", "Default")
    scr_cbDataGUI_set_tooltip(self, "Player_Name", "This is a tooltip")
    
    //gui_create_slider(guid, "Favorite Color", 0, 0, 255, c_red)
    self.Favorite_Color = c_red
    scr_cbDataGUI_add(self, "Favorite_Color", cbData_type.color, gui_folder_player)
    scr_cbDataGUI_set_value(self, "Favorite_Color", c_red)
    scr_cbDataGUI_set_tooltip(self, "Favorite_Color", "This is a tooltip")
  
    
    
    
    
  // Graphics
  //gui_create_menu(guid, "Graphics", false, 6, c_fuchsia);
  gui_folder_graphics = scr_cbDataGUI_add_folder("Graphics")
    
    
    //gui_create_watcher(guid, "FPS", fps, c_green);
    scr_cbDataGUI_add(self, "FPS", cbData_type.number, gui_folder_graphics)
    scr_cbDataGUI_set_value(self, "FPS", fps)
    scr_cbDataGUI_set_range(self, "FPS", 0, 100)
    scr_cbDataGUI_set_tooltip(self, "FPS", "This is a watcher tool to read the current FPS")
    
    //gui_create_watcher(guid, "FPS_mean", fps_real, c_orange);
    scr_cbDataGUI_add(self, "FPS_mean", cbData_type.number, gui_folder_graphics)
    scr_cbDataGUI_set_range(self, "FPS_mean", 0, 1000)
    scr_cbDataGUI_set_value(self, "FPS_mean", 0)
    scr_cbDataGUI_set_tooltip(self, "FPS_mean", "This is a watcher tool to read the average FPS across the last 5 seconds")
    
    //gui_create_checkbox(guid, "Smooth_Camera", obj_camera_control.smooth_camera, c_lime);
    scr_cbDataGUI_add(self, "Smooth_Camera", cbData_type.boolean, gui_folder_graphics)
    scr_cbDataGUI_set_value(self, "Smooth_Camera", obj_camera_control.smooth_camera)
    scr_cbDataGUI_set_tooltip(self, "Smooth_Camera", "Toggle sub pixel shading by upscaling the in game render, does not effect UI eliments")
    
    //gui_create_checkbox(guid, "Free_Cam", obj_camera_control.free_cam_mode, c_teal);
    scr_cbDataGUI_add(self, "Free_Cam", cbData_type.boolean, gui_folder_graphics)
    scr_cbDataGUI_set_value(self, "Free_Cam", 0)
    scr_cbDataGUI_set_tooltip(self, "Free_Cam", "Toggle camera movement restrictions.")
    
    //gui_create_button(guid, "Show_Chunks", chunk_debug_toggle, c_yellow);
    scr_cbDataGUI_add(self, "Show_Chunks", cbData_type.boolean, gui_folder_graphics)
    scr_cbDataGUI_set_value(self, "Show_Chunks", 0)
    scr_cbDataGUI_set_tooltip(self, "Show_Chunks", "Toggles chunks line renders and debug information")
    
    //gui_create_slider(guid, "room_speed", 60, 10, 60, c_green)
    scr_cbDataGUI_add(self, "Room_Speed", cbData_type.number, gui_folder_graphics)
    scr_cbDataGUI_set_range(self, "Room_Speed", 10, 120)
    scr_cbDataGUI_set_step(self, "Room_Speed", 1)
    scr_cbDataGUI_set_value(self, "Room_Speed", room_speed)
    scr_cbDataGUI_set_tooltip(self, "Room_Speed", "Set the number of steps to run per second. Default = 60")
    
    
    
    
    
  //gui_create_button(guid, "Restart", src_restart, $0202a4);
  scr_cbDataGUI_add(self, "Restart", cbData_type.function, -1, src_restart)
  scr_cbDataGUI_set_tooltip(self, "Restart", "This is a tooltip")
  
  //gui_create_button(guid, "Discord", src_url, $b6599b);
  scr_cbDataGUI_add(self, "Discord", cbData_type.function, -1, src_url)
  scr_cbDataGUI_set_tooltip(self, "Discord", "Check out the development Discord")
  
  
  //gui_create_button(guid, "Warp To Shore", teleport_to_shore, $b6599b);
  scr_cbDataGUI_add(self, "Warp_To_Shore", cbData_type.function, -1, teleport_to_shore)
  scr_cbDataGUI_set_tooltip(self, "Warp_To_Shore", "This is a tooltip")
  
  
  
gui_offset = 276  
time = 0;
spd = 0.1;


///close all the folders
  scr_cbDataGUI_open_folder(gui_folder_modifiers, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_global, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_melee, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_ranged, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_summon, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_summon_movement, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_summon_attack, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_summon_health, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_summon_passive, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_toy, false)
  scr_cbDataGUI_open_folder(gui_folder_modifiers_random, false)
  scr_cbDataGUI_open_folder(gui_folder_player, false)
  scr_cbDataGUI_open_folder(gui_folder_graphics, false)



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show_debug_overlay(true)
if (global.debug = true)
{
  show_debug_overlay(true)
} else {
  scr_cbDataGUI_toggle_gui()
  show_debug_overlay(false)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Previous Values
last_aoe = scr_cbDataGUI_get_value(self, "AOE");
last_continuous = scr_cbDataGUI_get_value(self, "Continuous");
last_charge = scr_cbDataGUI_get_value(self, "Charge");
last_repeater = scr_cbDataGUI_get_value(self, "Repeater");
last_dash = scr_cbDataGUI_get_value(self, "Dash");
last_evade = scr_cbDataGUI_get_value(self, "Evade");
last_enlarge = scr_cbDataGUI_get_value(self, "Enlarge");
last_shrink = scr_cbDataGUI_get_value(self, "Shrink");
last_aimBot = scr_cbDataGUI_get_value(self, "Aim Bot");
last_knockback = scr_cbDataGUI_get_value(self, "Knockback");
last_slash = scr_cbDataGUI_get_value(self, "Slash");
last_thrust = scr_cbDataGUI_get_value(self, "Thrust");
last_chained = scr_cbDataGUI_get_value(self, "Chained");
last_meleeRanged = scr_cbDataGUI_get_value(self, "Melee Ranged");
last_swift = scr_cbDataGUI_get_value(self, "Swiftness");
last_slow = scr_cbDataGUI_get_value(self, "Slowness");
last_backStab = scr_cbDataGUI_get_value(self, "Back Stab");
last_flail = scr_cbDataGUI_get_value(self, "Flail");
last_moveable = scr_cbDataGUI_get_value(self, "Moveable");
last_extend = scr_cbDataGUI_get_value(self, "Extend");
last_sticky = scr_cbDataGUI_get_value(self, "Sticky");
last_bonusShot = scr_cbDataGUI_get_value(self, "Bonus Shot");
last_mirrorShot = scr_cbDataGUI_get_value(self, "Mirror Shot");
last_multiShot = scr_cbDataGUI_get_value(self, "Multi Shot");
last_burst = scr_cbDataGUI_get_value(self, "Burst");
last_inaccurate = scr_cbDataGUI_get_value(self, "Inaccurate");
last_cluster = scr_cbDataGUI_get_value(self, "Cluster");
last_boomerang = scr_cbDataGUI_get_value(self, "Boomerang");
last_negarang = scr_cbDataGUI_get_value(self, "Nega-Rang");
last_ricochet = scr_cbDataGUI_get_value(self, "Ricochet");
last_seeking = scr_cbDataGUI_get_value(self, "Seeking");
last_guiding = scr_cbDataGUI_get_value(self, "Guiding");
last_laser = scr_cbDataGUI_get_value(self, "Laser");
last_targeting = scr_cbDataGUI_get_value(self, "Targeting");
last_airStrike = scr_cbDataGUI_get_value(self, "Air Strike");
last_arcLightning = scr_cbDataGUI_get_value(self, "Arc Lightning");
last_quickScope = scr_cbDataGUI_get_value(self, "Quick Scope");
last_defaultMovement = scr_cbDataGUI_get_value(self, "Default Movement");
last_orbital = scr_cbDataGUI_get_value(self, "Orbital");
last_chainedMovement = scr_cbDataGUI_get_value(self, "Chained Movement");
last_jumpy = scr_cbDataGUI_get_value(self, "Jumpy");
last_leap = scr_cbDataGUI_get_value(self, "Leap");
last_stomp = scr_cbDataGUI_get_value(self, "Stomp");
last_hasten = scr_cbDataGUI_get_value(self, "Hasten");
last_kamikaze = scr_cbDataGUI_get_value(self, "Kamikaze");
last_defaultHealth = scr_cbDataGUI_get_value(self, "Default Health");
last_stoutHealth = scr_cbDataGUI_get_value(self, "Stout");
last_enlargedHealth = scr_cbDataGUI_get_value(self, "Enlarged");
last_timedHealth = scr_cbDataGUI_get_value(self, "Timed");
last_multiplyHealth = scr_cbDataGUI_get_value(self, "Multiply");
last_mount = scr_cbDataGUI_get_value(self, "Mount")
last_paint = scr_cbDataGUI_get_value(self, "Paint");






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fps counter variables

fps_grid = ds_grid_create(1, 250)
fps_mean = 0
frame_i = 0
h = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clamp the modifier's scales [[[Outdated]]]

/*
if (global.debug = true){
    if (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)){
  
      ///Debug Controller New Values
      if gui_get_value(guid, 'Modifiers'){
      
      //Global
        if gui_get_value(guid, 'Global'){
          gui_set_value(guid, "AOE", floor(0.5+gui_get_value(guid, "AOE")) div 1);
          gui_set_value(guid, "Continuous", floor(0.5+gui_get_value(guid, "Continuous")) div 1);
          gui_set_value(guid, "Charge", floor(0.5+gui_get_value(guid, "Charge")) div 1);
          gui_set_value(guid, "Repeater", floor(0.5+gui_get_value(guid, "Repeater")) div 1);
          gui_set_value(guid, "Dash", floor(0.5+gui_get_value(guid, "Dash")) div 1);
          gui_set_value(guid, "Evade", floor(0.5+gui_get_value(guid, "Evade")) div 1);
          gui_set_value(guid, "Enlarge", floor(0.5+gui_get_value(guid, "Enlarge")) div 1);
          gui_set_value(guid, "Shrink", floor(0.5+gui_get_value(guid, "Shrink")) div 1);
          gui_set_value(guid, "Aim Bot", floor(0.5+gui_get_value(guid, "Aim Bot")) div 1);
          gui_set_value(guid, "Knockback", floor(0.5+gui_get_value(guid, "Knockback")) div 1);
          
        }
      //Melee
        if gui_get_value(guid, 'Melee'){
          gui_set_value(guid, "Slash", floor(0.5+gui_get_value(guid, "Slash")) div 1);
          gui_set_value(guid, "Thrust", floor(0.5+gui_get_value(guid, "Thrust")) div 1);
          gui_set_value(guid, "Chained", floor(0.5+gui_get_value(guid, "Chained")) div 1);
          gui_set_value(guid, "Melee Ranged", floor(0.5+gui_get_value(guid, "Melee Ranged")) div 1);
          gui_set_value(guid, "Swiftness", floor(0.5+gui_get_value(guid, "Swiftness")) div 1);
          gui_set_value(guid, "Slowness", floor(0.5+gui_get_value(guid, "Slowness")) div 1);
          gui_set_value(guid, "Back Stab", floor(0.5+gui_get_value(guid, "Back Stab")) div 1);
          gui_set_value(guid, "Flail", floor(0.5+gui_get_value(guid, "Flail")) div 1);
          gui_set_value(guid, "Moveable", floor(0.5+gui_get_value(guid, "Moveable")) div 1);
          gui_set_value(guid, "Extend", floor(0.5+gui_get_value(guid, "Extend")) div 1);
          
        }
      //Range
        if gui_get_value(guid, 'Ranged'){
          gui_set_value(guid, "Sticky", floor(0.5+gui_get_value(guid, "Sticky")) div 1);
          gui_set_value(guid, "Bonus Shot", floor(0.5+gui_get_value(guid, "Bonus Shot")) div 1);
          gui_set_value(guid, "Mirror Shot", floor(0.5+gui_get_value(guid, "Mirror Shot")) div 1);
          gui_set_value(guid, "Multi Shot", floor(0.5+gui_get_value(guid, "Multi Shot")) div 1);
          gui_set_value(guid, "Burst", floor(0.5+gui_get_value(guid, "Burst"))div 1);
          gui_set_value(guid, "Inaccurate", floor(0.5+gui_get_value(guid, "Inaccurate"))div 1);
          gui_set_value(guid, "Cluster", floor(0.5+gui_get_value(guid, "Cluster")) div 1);
          gui_set_value(guid, "Boomerang", floor(0.5+gui_get_value(guid, "Boomerang")) div 1);
          gui_set_value(guid, "Nega-Rang", floor(0.5+gui_get_value(guid, "Nega-Rang")) div 1);
          gui_set_value(guid, "Ricochet", floor(0.5+gui_get_value(guid, "Ricochet")) div 1);
          gui_set_value(guid, "Seeking", floor(0.5+gui_get_value(guid, "Seeking")) div 1);
          gui_set_value(guid, "Guiding", floor(0.5+gui_get_value(guid, "Guiding")) div 1);
          gui_set_value(guid, "Laser", floor(0.5+gui_get_value(guid, "Laser")) div 1);
          gui_set_value(guid, "Targeting", floor(0.5+gui_get_value(guid, "Targeting")) div 1);
          gui_set_value(guid, "Air Strike", floor(0.5+gui_get_value(guid, "Air Strike")) div 1);
          gui_set_value(guid, "Arc Lightning", floor(0.5+gui_get_value(guid, "Arc Lightning")) div 1);
          gui_set_value(guid, "Quick Scope", floor(0.5+gui_get_value(guid, "Quick Scope")) div 1);
          
        }
      //Summon
        if gui_get_value(guid, 'Summon'){
          if gui_get_value(guid, 'Movement'){
           gui_set_value(guid, "Default Movement", floor(0.5+gui_get_value(guid, "Default Movement")) div 1); 
           gui_set_value(guid, "Orbital", floor(0.5+gui_get_value(guid, "Orbital")) div 1); 
           gui_set_value(guid, "Chained Movement", floor(0.5+gui_get_value(guid, "Chained Movement")) div 1); 
           gui_set_value(guid, "Jumpy", floor(0.5+gui_get_value(guid, "Jumpy")) div 1); 
           
          }
          if gui_get_value(guid, 'Attack'){
           gui_set_value(guid, "Leap", floor(0.5+gui_get_value(guid, "Leap")) div 1); 
           gui_set_value(guid, "Stomp", floor(0.5+gui_get_value(guid, "Stomp")) div 1); 
           gui_set_value(guid, "Hasten", floor(0.5+gui_get_value(guid, "Hasten")) div 1); 
           gui_set_value(guid, "Kamikaze", floor(0.5+gui_get_value(guid, "Kamikaze")) div 1); 
           
          }
          if gui_get_value(guid, 'Health'){
            gui_set_value(guid, "Default Health", floor(0.5+gui_get_value(guid, "Default Health")) div 1);
            gui_set_value(guid, "Stout", floor(0.5+gui_get_value(guid, "Stout")) div 1);
            gui_set_value(guid, "Enlarged", floor(0.5+gui_get_value(guid, "Enlarged")) div 1);
            gui_set_value(guid, "Timed", floor(0.5+gui_get_value(guid, "Timed")) div 1);
            gui_set_value(guid, "Multiply", floor(0.5+gui_get_value(guid, "Multiply")) div 1);
          }
          if gui_get_value(guid, 'Passive'){
            gui_set_value(guid, "Mount", floor(0.5+gui_get_value(guid, "Mount")) div 1);
          }
          
        }
      
      //Toy Mods
        if gui_get_value(guid, 'Toy Mods'){
          gui_set_value(guid, "Paint", floor(0.5+gui_get_value(guid, "Paint")) div 1); 
        }
      
      //Graphics
        if gui_get_value(guid, 'Graphics'){
          gui_set_value(guid, "room_speed", floor(0.5+gui_get_value(guid, "room_speed")) div 1); 
        }
      
      //Randomize
        if gui_get_value(guid, 'Random'){
          gui_set_value(guid, "Random Mod Count", floor(0.5+gui_get_value(guid, "Random Mod Count")) div 1); 
        }
        
      
      }
    }
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Apply Variables
if (global.debug = true){
  if (mouse_check_button_pressed(mb_left)){
    
    //Player
    if (obj_player.player_name != scr_cbDataGUI_get_value(self, 'Player_Name'))
    {
      with (obj_player){
        if htme_isLocal(){
          player_name = scr_cbDataGUI_get_value(other, 'Player_Name')
          
          switch (string_lower(player_name))
          {
          case "red":
            head = spr_head_dev_skin_head_red;
            body = spr_head_dev_skin_body_red;
            break;
          case "arma":
          case "armadillo":
            head = spr_head_template;
            body = spr_body_template;
            break;
          case "olaf":
            head = spr_head_dev_skin_head_olaf;
            body = spr_head_dev_skin_body_olaf;
            break;
          case "shiv":
          case "shaymire":
            head = spr_head_dev_skin_head_shaymire;
            body = spr_head_dev_skin_body_shaymire;
            break;
          case "nostud thiago":
            head = spr_head_dev_skin_head_nostud_thiago;
            body = spr_head_dev_skin_body_nostud_thiago;
            break;
          default:
            head = spr_head_template;
            body = spr_body_template;
          }
        }
      }

      
      
    }
    
    
    
    //graphics
      //if gui_get_value(guid, 'Graphics') || (update_debug = true){
      if scr_cbDataGUI_folder_is_open(gui_folder_graphics) || (update_debug = true){
        //adjust camera draw settings///////////////////
        //obj_camera_control.smooth_camera = gui_get_value(guid, 'Smooth Camera');
        obj_camera_control.smooth_camera = scr_cbDataGUI_get_value(self, 'Smooth_Camera');
        //obj_camera_control.free_cam_mode = gui_get_value(guid, 'Free Cam');
        obj_camera_control.free_cam_mode = scr_cbDataGUI_get_value(self, 'Free_Cam');
        //obj_camera_control.free_cam_mode = scr_cbDataGUI_get_value(self, 'Free_Cam');
        
        
        if obj_chunk_supervisor.show_chunks != scr_cbDataGUI_get_value(self, 'Show_Chunks'){
          chunk_debug_toggle()
        }
        
        
        //if (obj_camera_control.frame_rate != gui_get_value(guid, 'room_speed')){
        if (obj_camera_control.frame_rate != scr_cbDataGUI_get_value(self, 'Room_Speed')){
          //obj_camera_control.frame_rate = gui_get_value(guid, 'room_speed')
          obj_camera_control.frame_rate = scr_cbDataGUI_get_value(self, 'Room_Speed')
        }
      }
      ////////////////////////////////////////////////
      
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Apply New Values [Modifiers]

if update_debug || (global.debug = true){
  if (mouse_check_button_pressed(mb_left)){
    //if (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)) || (update_debug = true){
      
      if (scr_cbDataGUI_folder_is_open(gui_folder_modifiers)
        &amp;&amp; ((scr_cbDataGUI_folder_is_open(gui_folder_modifiers_global)
          || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_melee)
          || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_ranged)
          || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon)
          || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_toy))
         )
      )
      || (update_debug = true)
      {
        
        
        for (var i = 0; i &lt; 3; i++){  //for all three weapons
          
          var queue_button_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_pre_weap_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_weap_spawn_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_proj_spawn_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_attack_step_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_pre_col_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_col_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_post_attack_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          
          //Global
          if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_global) || (update_debug = true){
            if update_debug || last_aoe != scr_cbDataGUI_get_value(self, "AOE") scr_modifier_adjust(queue_col_mods, scr_mod_aoe, 2, scr_cbDataGUI_get_value(self, "AOE"));
            if update_debug || last_continuous != scr_cbDataGUI_get_value(self, "Continuous") scr_modifier_adjust(queue_col_mods, scr_mod_continuous, 1, scr_cbDataGUI_get_value(self, "Continuous"));
            if update_debug || last_charge != scr_cbDataGUI_get_value(self, "Charge") scr_modifier_adjust(queue_button_mods, scr_mod_charged, 1, scr_cbDataGUI_get_value(self, "Charge"));
            if update_debug || last_repeater != scr_cbDataGUI_get_value(self, "Repeater") scr_modifier_adjust(queue_button_mods, scr_mod_repeater, 2, scr_cbDataGUI_get_value(self, "Repeater")); 
            if update_debug || last_dash != scr_cbDataGUI_get_value(self, "Dash") scr_modifier_adjust(queue_pre_weap_mods, scr_mod_dash, 1, scr_cbDataGUI_get_value(self, "Dash"));
            if update_debug || last_evade != scr_cbDataGUI_get_value(self, "Evade") scr_modifier_adjust(queue_post_attack_mods, scr_mod_evade, 1, scr_cbDataGUI_get_value(self, "Evade"));
            if update_debug || last_enlarge != scr_cbDataGUI_get_value(self, "Enlarge") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_enlarge, 6, scr_cbDataGUI_get_value(self, "Enlarge"));
            if update_debug || last_shrink != scr_cbDataGUI_get_value(self, "Shrink") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_shrink, 7, scr_cbDataGUI_get_value(self, "Shrink"));
            if update_debug || last_aimBot != scr_cbDataGUI_get_value(self, "Aim_Bot") scr_modifier_adjust(queue_pre_weap_mods, scr_mod_aimBot, 0, scr_cbDataGUI_get_value(self, "Aim_Bot"));
            if update_debug || last_knockback != scr_cbDataGUI_get_value(self, "Knockback") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_knockback, 0, scr_cbDataGUI_get_value(self, "Knockback"));
            
          }
          
          //Melee
          if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_melee) || (update_debug = true){
            if update_debug || last_slash != scr_cbDataGUI_get_value(self, "Slash") scr_modifier_adjust(queue_attack_step_mods, scr_mod_slash, 2, scr_cbDataGUI_get_value(self, "Slash"));
            if update_debug || last_thrust != scr_cbDataGUI_get_value(self, "Thrust") scr_modifier_adjust(queue_attack_step_mods, scr_mod_thrust, 3, scr_cbDataGUI_get_value(self, "Thrust"));
            if update_debug || last_chained != scr_cbDataGUI_get_value(self, "Chained") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_chained, 5, scr_cbDataGUI_get_value(self, "Chained"));
            if update_debug || last_meleeRanged != scr_cbDataGUI_get_value(self, "Melee_Ranged") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_range, 8, scr_cbDataGUI_get_value(self, "Melee_Ranged"));
            if update_debug || last_swift != scr_cbDataGUI_get_value(self, "Swiftness") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_swiftness, 2, scr_cbDataGUI_get_value(self, "Swiftness"));
            if update_debug || last_slow != scr_cbDataGUI_get_value(self, "Slowness") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_slowness, 3, scr_cbDataGUI_get_value(self, "Slowness"));
            if update_debug || last_backStab != scr_cbDataGUI_get_value(self, "Back_Stab") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_backStab, 1, scr_cbDataGUI_get_value(self, "Back_Stab"));
            if update_debug || last_flail != scr_cbDataGUI_get_value(self, "Flail") scr_modifier_adjust(queue_attack_step_mods, scr_mod_flail, 6, scr_cbDataGUI_get_value(self, "Flail"));
            if update_debug || last_moveable != scr_cbDataGUI_get_value(self, "Moveable") scr_modifier_adjust(queue_attack_step_mods, scr_mod_moveable, 7, scr_cbDataGUI_get_value(self, "Moveable"));
            if update_debug || last_extend != scr_cbDataGUI_get_value(self, "Extend") scr_modifier_adjust(queue_attack_step_mods, scr_mod_extend, 99, scr_cbDataGUI_get_value(self, "Extend"));
            
          }
          
          //Ranged
          if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_ranged) || (update_debug = true){
            if obj_player.item_data[i, weapon_type] = item_type_weapon_range{
              if update_debug || last_sticky != scr_cbDataGUI_get_value(self, "Sticky") scr_modifier_adjust(queue_col_mods, scr_mod_sticky, 1, scr_cbDataGUI_get_value(self, "Sticky"));
              if update_debug || last_bonusShot != scr_cbDataGUI_get_value(self, "Bonus_Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_bonusShot, 2, scr_cbDataGUI_get_value(self, "Bonus_Shot"));
              if update_debug || last_mirrorShot != scr_cbDataGUI_get_value(self, "Mirror_Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_mirrorShot, 3, scr_cbDataGUI_get_value(self, "Mirror_Shot"));
              if update_debug || last_multiShot != scr_cbDataGUI_get_value(self, "Multi_Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_multishot, 4, scr_cbDataGUI_get_value(self, "Multi_Shot"));
              if update_debug || last_inaccurate != scr_cbDataGUI_get_value(self, "Inaccurate") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_inaccurate, 98, scr_cbDataGUI_get_value(self, "Inaccurate"));
              if update_debug || last_burst != scr_cbDataGUI_get_value(self, "Burst") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_burst, 5, scr_cbDataGUI_get_value(self, "Burst"));
              if update_debug || last_cluster != scr_cbDataGUI_get_value(self, "Cluster") scr_modifier_adjust(queue_pre_col_mods, scr_mod_cluster, 3, scr_cbDataGUI_get_value(self, "Cluster"));
              if update_debug || last_boomerang != scr_cbDataGUI_get_value(self, "Boomerang") scr_modifier_adjust(queue_pre_col_mods, scr_mod_boomerang, 2, scr_cbDataGUI_get_value(self, "Boomerang"));
              if update_debug || last_negarang != scr_cbDataGUI_get_value(self, "Nega_Rang") scr_modifier_adjust(queue_col_mods, scr_mod_negarang, 1, scr_cbDataGUI_get_value(self, "Nega_Rang"));
              if update_debug || last_ricochet != scr_cbDataGUI_get_value(self, "Ricochet") scr_modifier_adjust(queue_pre_col_mods, scr_mod_ricochet, 1, scr_cbDataGUI_get_value(self, "Ricochet"));
              if update_debug || last_seeking != scr_cbDataGUI_get_value(self, "Seeking") scr_modifier_adjust(queue_attack_step_mods, scr_mod_seeking, 4, scr_cbDataGUI_get_value(self, "Seeking"));
              if update_debug || last_guiding != scr_cbDataGUI_get_value(self, "Guiding") scr_modifier_adjust(queue_attack_step_mods, scr_mod_guiding, 5, scr_cbDataGUI_get_value(self, "Guiding"));
              if update_debug || last_laser != scr_cbDataGUI_get_value(self, "Laser") scr_modifier_adjust(queue_attack_step_mods, scr_mod_laser, 5, scr_cbDataGUI_get_value(self, "Laser"));
              if update_debug || last_targeting != scr_cbDataGUI_get_value(self, "Targeting") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_targeting, 1, scr_cbDataGUI_get_value(self, "Targeting"));
              if update_debug || last_airStrike != scr_cbDataGUI_get_value(self, "Air_Strike") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_airStrike, 99, scr_cbDataGUI_get_value(self, "Air_Strike"));
              if update_debug || last_arcLightning != scr_cbDataGUI_get_value(self, "Arc_Lightning") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_arcLightning, 98, scr_cbDataGUI_get_value(self, "Arc_Lightning"));
              if update_debug || last_quickScope != scr_cbDataGUI_get_value(self, "Quick_Scope") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_quickScope, 7, scr_cbDataGUI_get_value(self, "Quick_Scope"));
              
            }
          }
          
          //Summon
          if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon) || (update_debug = true){
            //Movement
            if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon_movement) || (update_debug = true){
             if update_debug || last_defaultMovement != scr_cbDataGUI_get_value(self, "Default_Movement") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_walk, 1, scr_cbDataGUI_get_value(self, "Default_Movement"));
             if update_debug || last_orbital != scr_cbDataGUI_get_value(self, "Orbital") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_orbital, 1, scr_cbDataGUI_get_value(self, "Orbital"));
             if update_debug || last_chainedMovement != scr_cbDataGUI_get_value(self, "Chained_Movement") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_chained, 1, scr_cbDataGUI_get_value(self, "Chained_Movement"));
             if update_debug || last_jumpy != scr_cbDataGUI_get_value(self, "Jumpy") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_jumpy, 1, scr_cbDataGUI_get_value(self, "Jumpy"));
             
            }
            //Attack
            if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon_attack) || (update_debug = true){
             if update_debug || last_leap != scr_cbDataGUI_get_value(self, "Leap") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_leap, 1, scr_cbDataGUI_get_value(self, "Leap"));
             if update_debug || last_stomp != scr_cbDataGUI_get_value(self, "Stomp") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_stomp, 1, scr_cbDataGUI_get_value(self, "Stomp"));
             if update_debug || last_hasten != scr_cbDataGUI_get_value(self, "Hasten") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_hasten, 1, scr_cbDataGUI_get_value(self, "Hasten"));
             if update_debug || last_kamikaze != scr_cbDataGUI_get_value(self, "Kamikaze") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_kamikaze, 1, scr_cbDataGUI_get_value(self, "Kamikaze"));
             
            }
            //Health
            if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon_health) || (update_debug = true){
              if update_debug || last_defaultHealth != scr_cbDataGUI_get_value(self, "Default_Health") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_default, 1, scr_cbDataGUI_get_value(self, "Default_Health"));
              if update_debug || last_stoutHealth != scr_cbDataGUI_get_value(self, "Stout") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_stout, 88, scr_cbDataGUI_get_value(self, "Stout"));
              if update_debug || last_enlargedHealth != scr_cbDataGUI_get_value(self, "Enlarged") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_enlarged, 2, scr_cbDataGUI_get_value(self, "Enlarged"));
              if update_debug || last_timedHealth != scr_cbDataGUI_get_value(self, "Timed") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_timed, 99, scr_cbDataGUI_get_value(self, "Timed"));
              if update_debug || last_multiplyHealth != scr_cbDataGUI_get_value(self, "Multiply") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_multiply, 3, scr_cbDataGUI_get_value(self, "Multiply"));
              
            }
            //Passive
            if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon_passive) || (update_debug = true){
              if update_debug || last_mount != scr_cbDataGUI_get_value(self, "Mount") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_passive_mount, 99, scr_cbDataGUI_get_value(self, "Mount"));
              
            }
            
          }
          
          //Toy Mods
          if scr_cbDataGUI_folder_is_open(gui_folder_modifiers_toy) || (update_debug = true){
            //if obj_player.item_data[i, weapon_type] = item_type_weapon_range{
            if update_debug || last_paint != scr_cbDataGUI_get_value(self, "Paint") scr_modifier_adjust(queue_col_mods, scr_mod_paint, 2, scr_cbDataGUI_get_value(self, "Paint"));
          }
          
          ds_priority_add(obj_player.item_queues[i], queue_button_mods, 1);
          ds_priority_add(obj_player.item_queues[i], queue_pre_weap_mods, 2);
          ds_priority_add(obj_player.item_queues[i], queue_weap_spawn_mods, 3);
          ds_priority_add(obj_player.item_queues[i], queue_proj_spawn_mods, 4);
          ds_priority_add(obj_player.item_queues[i], queue_attack_step_mods, 5);
          ds_priority_add(obj_player.item_queues[i], queue_pre_col_mods, 6);
          ds_priority_add(obj_player.item_queues[i], queue_col_mods, 7);
          ds_priority_add(obj_player.item_queues[i], queue_post_attack_mods, 8);
        }
//      }
      
    }
  }
}

if (update_debug) update_debug = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Previous Values
if update_debug || (global.debug = true){
  if update_debug || (mouse_check_button_pressed(mb_left)){
    //if update_debug || (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)){
      
      last_smooth = scr_cbDataGUI_get_value(self, 'Smooth Camera');
      
      if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers){
        if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_global){
          last_aoe = scr_cbDataGUI_get_value(self, "AOE");
          last_continuous = scr_cbDataGUI_get_value(self, "Continuous");
          last_charge = scr_cbDataGUI_get_value(self, "Charge");
          last_repeater = scr_cbDataGUI_get_value(self, "Repeater");
          last_dash = scr_cbDataGUI_get_value(self, "Dash");
          last_evade = scr_cbDataGUI_get_value(self, "Evade");
          last_enlarge = scr_cbDataGUI_get_value(self, "Enlarge");
          last_shrink = scr_cbDataGUI_get_value(self, "Shrink");
          last_aimBot = scr_cbDataGUI_get_value(self, "Aim Bot");
          last_knockback = scr_cbDataGUI_get_value(self, "Knockback");
        }
        
        if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_melee){
          last_slash = scr_cbDataGUI_get_value(self, "Slash");
          last_thrust = scr_cbDataGUI_get_value(self, "Thrust");
          last_chained = scr_cbDataGUI_get_value(self, "Chained");
          last_meleeRanged = scr_cbDataGUI_get_value(self, "Melee Ranged");
          last_swift = scr_cbDataGUI_get_value(self, "Swiftness");
          last_slow = scr_cbDataGUI_get_value(self, "Slowness");
          last_backStab = scr_cbDataGUI_get_value(self, "Back Stab");
          last_flail = scr_cbDataGUI_get_value(self, "Flail");
          last_moveable = scr_cbDataGUI_get_value(self, "Moveable");
          last_extend = scr_cbDataGUI_get_value(self, "Extend");
          
        }
          
        if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_ranged){
          last_sticky = scr_cbDataGUI_get_value(self, "Sticky");
          last_bonusShot = scr_cbDataGUI_get_value(self, "Bonus Shot");
          last_mirrorShot = scr_cbDataGUI_get_value(self, "Mirror Shot");
          last_multiShot = scr_cbDataGUI_get_value(self, "Multi Shot");
          last_burst = scr_cbDataGUI_get_value(self, "Burst");
          last_inaccurate = scr_cbDataGUI_get_value(self, "Inaccurate");
          last_cluster = scr_cbDataGUI_get_value(self, "Cluster");
          last_boomerang = scr_cbDataGUI_get_value(self, "Boomerang");
          last_negarang = scr_cbDataGUI_get_value(self, "Nega-Rang");
          last_ricochet = scr_cbDataGUI_get_value(self, "Ricochet");
          last_seeking = scr_cbDataGUI_get_value(self, "Seeking");
          last_guiding = scr_cbDataGUI_get_value(self, "Guiding");
          last_laser = scr_cbDataGUI_get_value(self, "Laser");
          last_targeting = scr_cbDataGUI_get_value(self, "Targeting");
          last_airStrike = scr_cbDataGUI_get_value(self, "Air Strike");
          last_arcLightning = scr_cbDataGUI_get_value(self, "Arc Lightning");
          last_quickScope = scr_cbDataGUI_get_value(self, "Quick Scope");
        }
        
        if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_summon){
          last_defaultMovement = scr_cbDataGUI_get_value(self, "Default Movement");
          last_orbital = scr_cbDataGUI_get_value(self, "Orbital");
          last_chainedMovement = scr_cbDataGUI_get_value(self, "Chained Movement");
          last_jumpy = scr_cbDataGUI_get_value(self, "Jumpy");
          last_leap = scr_cbDataGUI_get_value(self, "Leap");
          last_stomp = scr_cbDataGUI_get_value(self, "Stomp");
          last_hasten = scr_cbDataGUI_get_value(self, "Hasten");
          last_kamikaze = scr_cbDataGUI_get_value(self, "Kamikaze");
          last_defaultHealth = scr_cbDataGUI_get_value(self, "Default Health");
          last_stoutHealth = scr_cbDataGUI_get_value(self, "Stout");
          last_enlargedHealth = scr_cbDataGUI_get_value(self, "Enlarged");
          last_timedHealth = scr_cbDataGUI_get_value(self, "Timed");
          last_multiplyHealth = scr_cbDataGUI_get_value(self, "Multiply");
          last_mount = scr_cbDataGUI_get_value(self, "Mount")
          
        }
        
        if update_debug || scr_cbDataGUI_folder_is_open(gui_folder_modifiers_toy){
          last_paint = scr_cbDataGUI_get_value(self, "Paint");
        }
        
      }
//    }
  }
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset debug string
for (var i = 0; i &lt; 8; i++)
{
  debug_string[i] = "        [DEBUG MENU]        #"
  if (i = 0) debug_string[i] = "        [DEBUG MENU]        #"+"fps_real = "+string(fps_real)+"#fps_mean = "+string(fps_mean)+"#world_seed = "+string(global.chunk_handler.world_seed)+"#"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord('H')){
  if global.show_entity_data{
    global.show_entity_data = false
  }else{
    global.show_entity_data = true
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gui_destroy_gui(guid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
frame_i++
if (frame_i &gt;= 250) {frame_i -= 250}

fps_grid[#0, frame_i] = fps_real
fps_mean = ds_grid_get_mean(fps_grid,0,0,0,240-1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Display Text

if (global.debug = true){
  
  draw_set_font(global.font_menu)
  
  draw_set_halign(fa_left)
  draw_set_valign(fa_top)
  
  
  if (global.numberOfLocalPlayers = 1){
     var h = 21
     var xx = view_xport
     var yy = view_yport
     var width = string_width(debug_string[0])
     var height = string_height(debug_string[0])
     draw_set_alpha(0.5)
     draw_set_color(c_dkgray)
     draw_rectangle(xx, yy+h, xx+width, yy+h+height, 0)
     //scr_draw_9slices_ext(spr_menu_9slice, 0, xx,yy+h, xx+width, yy+h+height, c_white, 1, 1)
     draw_set_alpha(1)
     draw_set_color(c_white)
     draw_text(xx,yy+h, debug_string[0])
     
  }else{ //for local multiplayer
    
    for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
      var xx = view_xport[i]
      var yy = view_yport[i]+4
      var width = string_width(debug_string[i])
      var height = string_height(debug_string[i])
      
      if view_visible[i]{
        var h = 21
        if (i = 0){
          draw_set_alpha(0.5)
          draw_set_color(c_dkgray)
          draw_rectangle(xx,yy+h, xx+width, yy+h+height, 0)
          draw_set_alpha(1)
          draw_set_color(c_white)
          draw_text(xx, yy+h, debug_string[i])
        } else {
          draw_set_alpha(0.5)
          draw_set_color(c_dkgray)
          draw_rectangle(xx,yy, xx+width, yy+height, 0)
          draw_set_alpha(1)
          draw_set_color(c_white)
          draw_text(xx,yy, debug_string[i])
        }
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dont draw self
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle dev tools

scr_cbDataGUI_toggle_gui()
if (global.debug = true)
{
  global.debug = false
  show_debug_overlay(false)
} else {
  global.debug = true
  show_debug_overlay(true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
