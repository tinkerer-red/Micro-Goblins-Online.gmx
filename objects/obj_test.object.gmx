<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_green</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_menu = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if chunk_tile_free(mouse_x, mouse_y, "layer_structures") show_debug_player(0, "tile is free!!");


if (mouse_check_button(mb_left) &amp;&amp; mouse_check_button_pressed(mb_right))
|| (mouse_check_button_pressed(mb_left) &amp;&amp; mouse_check_button(mb_right)){
  teleport(mouse_x, mouse_y, 0)
}

/*
finished = false
var i = 0
var grid_count = 0
var list_count = 0
var map_count = 0
var priority_count = 0
var queue_count = 0
var stack_count = 0
var surface_count = 0

while (finished = false){
  finished = true
  i++
  
  if ds_exists(i, ds_type_grid){
    grid_count++
    finished = false
  }
  if ds_exists(i, ds_type_list){
    list_count++
    finished = false
  }
  if ds_exists(i, ds_type_map){
    map_count++
    finished = false
  }
  if ds_exists(i, ds_type_priority){
    priority_count++
    finished = false
  }
  if ds_exists(i, ds_type_queue){
    queue_count++
    finished = false
  }
  if ds_exists(i, ds_type_stack){
    stack_count++
    finished = false
  }
  if surface_exists(i){
    surface_count++
    finished = false
  }
}


show_debug_message("grid_count = "+string(grid_count))
show_debug_message("list_count = "+string(list_count))
show_debug_message("map_count = "+string(map_count))
show_debug_message("priority_count = "+string(priority_count))
show_debug_message("queue_count = "+string(queue_count))
show_debug_message("stack_count = "+string(stack_count))
show_debug_message("surface_count = "+string(surface_count))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw_menu)
&amp;&amp; instance_exists(obj_menu){
  
  for (player_i = 0; player_i &lt; global.numberOfLocalPlayers; player_i++)
  {
    if surface_exists(obj_menu.menu_background_surface[player_i]){
      //display_set_gui_size(window_get_width(),window_get_height());
      draw_set_alpha(1)
      
      if (obj_camera_control.smooth_camera){
       var res_scale = 1/obj_camera_control.upscale_val
      }else{
        var res_scale = 1
      }
      
      var vx = view_xport[player_i]
      var vy = view_yport[player_i]
      var vw = view_wport[player_i]
      var vh = view_hport[player_i]
      
      
      var gui_scale = obj_menu.gui_scale[player_i]
      var w = surface_get_width(obj_menu.menu_background_surface[player_i])*gui_scale
      var menu_x_off = vx+floor((vw-w)/2)
      var menu_y_off = vy
      
      //draw the menu backdrop
      //draw_surface(obj_menu.menu_background_surface[player_i], 0, 0)
      draw_surface_stretched(obj_menu.menu_background_surface[player_i], 
                             menu_x_off, 
                             menu_y_off, 
                             surface_get_width(obj_menu.menu_background_surface[player_i])*gui_scale-1, 
                             surface_get_height(obj_menu.menu_background_surface[player_i])*gui_scale-1
                             )
                             
      //draw the inventory grid
      var inv_x_off = menu_x_off + obj_menu.inventory_x_off[player_i]*gui_scale
      var inv_y_off = menu_y_off + obj_menu.inventory_y_off[player_i]*gui_scale
      
      
      var inventory_view_y_off = 0
      
      var xscale = (surface_get_width(obj_menu.menu_inventory_surface[player_i])*gui_scale-1) / (surface_get_width(obj_menu.menu_inventory_surface[player_i])*gui_scale);
      var yscale = (surface_get_height(obj_menu.menu_inventory_surface[player_i])*gui_scale-1) / (surface_get_height(obj_menu.menu_inventory_surface[player_i])*gui_scale);
      
      var height = min(obj_menu.inv_height[player_i],
                       surface_get_height(obj_menu.menu_inventory_surface[player_i])
                       )
      
      draw_surface_part_ext(obj_menu.menu_inventory_surface[player_i], 
                             0,
                             inventory_view_y_off,
                             obj_menu.inv_width[player_i],
                             height,
                             inv_x_off,
                             inv_y_off,
                             xscale*gui_scale,
                             yscale*gui_scale,
                             c_white,
                             1
                             )
      /*
      draw_surface_stretched(obj_menu.menu_inventory_surface[player_i], 
                             inv_x_off, 
                             inv_y_off, 
                             obj_menu.inv_width[player_i]*gui_scale-1, 
                             obj_menu.inv_height[player_i]*gui_scale-1
                             )
      */
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_menu = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var j = json_encode(global.chunk_handler.active_interior_chunks)
show_debug_message(j)

teleport(32700, 2000, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_menu = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
