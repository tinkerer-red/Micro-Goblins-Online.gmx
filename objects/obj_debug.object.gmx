<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_debug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug options

global.debug = true

if (global.debug = true)
{
  show_debug_overlay(true)
} else {
  show_debug_overlay(false)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fps counter variables

fps_grid = ds_grid_create(1, 250)
fps_mean = 0
frame_i = 0
h = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controller

///init
draw_set_font(global.font_menu);
update_debug = false;

x = 0;
y = 0;

guid = gui_create_gui();

gui_create_string(guid, "text", "Debug Controller", c_white);

gui_create_menu(guid, "Modifiers", false, 64, c_black);
  
  gui_create_menu(guid, "Global", false, 10, c_aqua);
    gui_create_slider(guid, "AOE", 0, 0, 5, c_aqua)
    gui_create_slider(guid, "Continuous", 0, 0, 5, c_purple)
    gui_create_slider(guid, "Charge", 0, 0, 5, c_red)
    gui_create_slider(guid, "Repeater", 0, 0, 5, c_orange)
    gui_create_slider(guid, "Dash", 0, 0, 5, c_yellow)
    gui_create_slider(guid, "Evade", 0, 0, 5, c_green)
    gui_create_slider(guid, "Enlarge", 0, 0, 5, c_blue)
    gui_create_slider(guid, "Shrink", 0, 0, 5, c_aqua)
    gui_create_slider(guid, "Aim Bot", 0, 0, 5, c_purple)
    gui_create_slider(guid, "Knockback", 0, 0, 5, c_red)
    
  gui_create_menu(guid, "Melee", false, 10, c_green);
    gui_create_slider(guid, "Slash", 0, 0, 5, c_red);
    gui_create_slider(guid, "Thrust", 0, 0, 5, c_orange);
    gui_create_slider(guid, "Chained", 0, 0, 5, c_yellow);
    gui_create_slider(guid, "Melee Ranged", 0, 0, 5, c_green);
    gui_create_slider(guid, "Swiftness", 0, 0, 5, c_blue);
    gui_create_slider(guid, "Slowness", 0, 0, 5, c_aqua);
    gui_create_slider(guid, "Back Stab", 0, 0, 5, c_purple);
    gui_create_slider(guid, "Flail", 0, 0, 5, c_red);
    gui_create_slider(guid, "Moveable", 0, 0, 5, c_orange);
    gui_create_slider(guid, "Extend", 0, 0, 5, c_yellow);
    
  gui_create_menu(guid, "Ranged", false, 17, c_orange);
    gui_create_slider(guid, "Sticky", 0, 0, 5, c_purple)
    gui_create_slider(guid, "Bonus Shot", 0, 0, 5, c_red)
    gui_create_slider(guid, "Mirror Shot", 0, 0, 5, c_orange)
    gui_create_slider(guid, "Multi Shot", 0, 0, 5, c_yellow)
    gui_create_slider(guid, "Burst", 0, 0, 5, c_green)
    gui_create_slider(guid, "Inaccurate", 0, 0, 5, c_teal)
    gui_create_slider(guid, "Cluster", 0, 0, 5, c_blue)
    gui_create_slider(guid, "Boomerang", 0, 0, 5, c_purple)
    gui_create_slider(guid, "Nega-Rang", 0, 0, 5, c_red)
    gui_create_slider(guid, "Ricochet", 0, 0, 5, c_orange)
    gui_create_slider(guid, "Seeking", 0, 0, 5, c_yellow)
    gui_create_slider(guid, "Guiding", 0, 0, 5, c_green)
    gui_create_slider(guid, "Laser", 0, 0, 5, c_teal)
    gui_create_slider(guid, "Targeting", 0, 0, 5, c_blue)
    gui_create_slider(guid, "Air Strike", 0, 0, 5, c_purple)
    gui_create_slider(guid, "Arc Lightning", 0, 0, 5, c_red)
    gui_create_slider(guid, "Quick Scope", 0, 0, 5, c_orange)
    
    
  gui_create_menu(guid, "Summon", false, 18, c_green);
    ////////////////////////////////////////////////////////
    gui_create_menu(guid, "Movement", false, 4, c_blue);
      gui_create_slider(guid, "Default Movement", 0, 0, 5, c_red)
      gui_create_slider(guid, "Orbital", 0, 0, 5, c_orange)
      gui_create_slider(guid, "Chained Movement", 0, 0, 5, c_yellow)
      gui_create_slider(guid, "Jumpy", 0, 0, 5, c_orange)
      
    ////////////////////////////////////////////////////////
    gui_create_menu(guid, "Attack", false, 4, c_red);
      gui_create_slider(guid, "Leap", 0, 0, 5, c_yellow)
      gui_create_slider(guid, "Stomp", 0, 0, 5, c_green)
      gui_create_slider(guid, "Hasten", 0, 0, 5, c_blue)
      gui_create_slider(guid, "Kamikaze", 0, 0, 5, c_purple)
      
    ////////////////////////////////////////////////////////
    gui_create_menu(guid, "Health", false, 5, c_green);
      gui_create_slider(guid, "Default Health", 0, 0, 5, c_yellow)
      gui_create_slider(guid, "Stout", 0, 0, 5, c_green)
      gui_create_slider(guid, "Enlarged", 0, 0, 5, c_blue)
      gui_create_slider(guid, "Timed", 0, 0, 5, c_purple)
      gui_create_slider(guid, "Multiply", 0, 0, 5, c_red)
      
    gui_create_menu(guid, "Passive", false, 1, c_yellow);
      gui_create_slider(guid, "Mount", 0, 0, 5, c_green)
      
  
  gui_create_menu(guid, "Toy Mods", false, 1, c_fuchsia);
    gui_create_slider(guid, "Paint", 0, 0, 5, c_red)
  
  
  gui_create_menu(guid, "Random", false, 2, c_purple);
    gui_create_slider(guid, "Random Mod Count", 0, 0, 5, c_fuchsia)
    gui_create_button(guid, "Randomize Mods", scr_randomize_modifiers, c_lime);
  
  
    
    
    
    
    
  
  /// Player Values
  gui_create_menu(guid, "Player", false, 2, c_green);
    gui_create_button(guid, "Player Name", debugger_get_player_name, c_white)
    gui_create_slider(guid, "Favorite Color", 0, 0, 255, c_red)
    
  
    
    
    
    
  //graphics
  gui_create_menu(guid, "Graphics", false, 6, c_fuchsia);
    gui_create_watcher(guid, "FPS", fps, c_green);
    gui_create_watcher(guid, "FPS_mean", fps_real, c_orange);
    gui_create_checkbox(guid, "Smooth Camera", obj_camera_control.smooth_camera, c_lime);
    gui_create_checkbox(guid, "Free Cam", obj_camera_control.free_cam_mode, c_teal);
    gui_create_button(guid, "Show Chunks", chunk_debug_toggle, c_yellow);
    gui_create_slider(guid, "room_speed", 60, 10, 60, c_green)
    
    
    
  gui_create_button(guid, "Restart", src_restart, $0202a4);
  gui_create_button(guid, "Discord", src_url, $b6599b);
  gui_create_button(guid, "warp to shore", teleport_to_shore, $b6599b);

gui_set_gui(guid,
            204,
            17,
            70,
            32,
            2
            )

gui_offset = 276  
time = 0;
spd = 0.1;


//  display_set_gui_size(display_get_width(),display_get_height()); // need to be done for mobile


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset debug string
for (var i = 0; i &lt; 8; i++)
{
  debug_string[i] = "        [DEBUG MENU]        #"
  if (i = 0) debug_string[i] = "        [DEBUG MENU]        #"+"fps_real = "+string(fps_real)+"#fps_mean = "+string(fps_mean)+"#"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Previous Values
if update_debug || (global.debug = true){
  if update_debug || (mouse_check_button(mb_left)){
    if update_debug || (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)){
      
      last_smooth = gui_get_value(guid, 'Smooth Camera');
      
      if update_debug || gui_get_value(guid, 'Modifiers'){
        //if update_debug || gui_get_value(guid, 'Global'){
          last_aoe = gui_get_value(guid, "AOE");
          last_continuous = gui_get_value(guid, "Continuous");
          last_charge = gui_get_value(guid, "Charge");
          last_repeater = gui_get_value(guid, "Repeater");
          last_dash = gui_get_value(guid, "Dash");
          last_evade = gui_get_value(guid, "Evade");
          last_enlarge = gui_get_value(guid, "Enlarge");
          last_shrink = gui_get_value(guid, "Shrink");
          last_aimBot = gui_get_value(guid, "Aim Bot");
          last_knockback = gui_get_value(guid, "Knockback");
        //}
        
        //if update_debug || gui_get_value(guid, 'Melee'){
          last_slash = gui_get_value(guid, "Slash");
          last_thrust = gui_get_value(guid, "Thrust");
          last_chained = gui_get_value(guid, "Chained");
          last_meleeRanged = gui_get_value(guid, "Melee Ranged");
          last_swift = gui_get_value(guid, "Swiftness");
          last_slow = gui_get_value(guid, "Slowness");
          last_backStab = gui_get_value(guid, "Back Stab");
          last_flail = gui_get_value(guid, "Flail");
          last_moveable = gui_get_value(guid, "Moveable");
          last_extend = gui_get_value(guid, "Extend");
          
        //}
          
        //if update_debug || gui_get_value(guid, 'Ranged'){
          last_sticky = gui_get_value(guid, "Sticky");
          last_bonusShot = gui_get_value(guid, "Bonus Shot");
          last_mirrorShot = gui_get_value(guid, "Mirror Shot");
          last_multiShot = gui_get_value(guid, "Multi Shot");
          last_burst = gui_get_value(guid, "Burst");
          last_inaccurate = gui_get_value(guid, "Inaccurate");
          last_cluster = gui_get_value(guid, "Cluster");
          last_boomerang = gui_get_value(guid, "Boomerang");
          last_negarang = gui_get_value(guid, "Nega-Rang");
          last_ricochet = gui_get_value(guid, "Ricochet");
          last_seeking = gui_get_value(guid, "Seeking");
          last_guiding = gui_get_value(guid, "Guiding");
          last_laser = gui_get_value(guid, "Laser");
          last_targeting = gui_get_value(guid, "Targeting");
          last_airStrike = gui_get_value(guid, "Air Strike");
          last_arcLightning = gui_get_value(guid, "Arc Lightning");
          last_quickScope = gui_get_value(guid, "Quick Scope");
        //}
        
        //if update_debug || gui_get_value(guid, 'Summon'){
          last_defaultMovement = gui_get_value(guid, "Default Movement");
          last_orbital = gui_get_value(guid, "Orbital");
          last_chainedMovement = gui_get_value(guid, "Chained Movement");
          last_jumpy = gui_get_value(guid, "Jumpy");
          last_leap = gui_get_value(guid, "Leap");
          last_stomp = gui_get_value(guid, "Stomp");
          last_hasten = gui_get_value(guid, "Hasten");
          last_kamikaze = gui_get_value(guid, "Kamikaze");
          last_defaultHealth = gui_get_value(guid, "Default Health");
          last_stoutHealth = gui_get_value(guid, "Stout");
          last_enlargedHealth = gui_get_value(guid, "Enlarged");
          last_timedHealth = gui_get_value(guid, "Timed");
          last_multiplyHealth = gui_get_value(guid, "Multiply");
          last_mount = gui_get_value(guid, "Mount")
          
        //}
        
        //if update_debug || gui_get_value(guid, 'Toy Mods'){
          last_paint = gui_get_value(guid, "Paint");
        //}
        
      }
    }
  }
}







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Updates
if (global.debug = true){
      ////////// Updated items
      ///FPS tab
      gui_set_value(guid, 'FPS', fps);
      //gui_set_value(guid, "FPS_real", fps_real);
      gui_set_value(guid, "FPS_mean", fps_mean);
      
      
      
      
  if (device_mouse_x_to_gui(0) &gt; (window_get_width()-gui_offset)){
    
    
    // Interact with gui
    gui_check(guid, (window_get_width()-gui_offset), 0, device_mouse_x_to_gui(0), device_mouse_y_to_gui(0));
    
    
    
    //if the favorite color was updated make sure to change it's visual color on the menu
    if gui_get_value(guid, 'Player') || (update_debug = true){
      //grab and make the color
      var fav_hue_updated_hue = gui_get_value(guid, "Favorite Color")
      
      //set all the local player names to the debug's name string
      with (obj_player){
        if htme_isLocal(){
          self.fav_hue = fav_hue_updated_hue
        }
      }
        
      //change the menu's color
      var color = make_colour_hsv(255-fav_hue_updated_hue, 255, 255);
      gui_set_color(guid, "Favorite Color" , color)
      
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clamp the modifier's scales
if (global.debug = true){
    if (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)){
  
      ///Debug Controller New Values
      if gui_get_value(guid, 'Modifiers'){
      
      //Global
        if gui_get_value(guid, 'Global'){
          gui_set_value(guid, "AOE", floor(0.5+gui_get_value(guid, "AOE")) div 1);
          gui_set_value(guid, "Continuous", floor(0.5+gui_get_value(guid, "Continuous")) div 1);
          gui_set_value(guid, "Charge", floor(0.5+gui_get_value(guid, "Charge")) div 1);
          gui_set_value(guid, "Repeater", floor(0.5+gui_get_value(guid, "Repeater")) div 1);
          gui_set_value(guid, "Dash", floor(0.5+gui_get_value(guid, "Dash")) div 1);
          gui_set_value(guid, "Evade", floor(0.5+gui_get_value(guid, "Evade")) div 1);
          gui_set_value(guid, "Enlarge", floor(0.5+gui_get_value(guid, "Enlarge")) div 1);
          gui_set_value(guid, "Shrink", floor(0.5+gui_get_value(guid, "Shrink")) div 1);
          gui_set_value(guid, "Aim Bot", floor(0.5+gui_get_value(guid, "Aim Bot")) div 1);
          gui_set_value(guid, "Knockback", floor(0.5+gui_get_value(guid, "Knockback")) div 1);
          
        }
      //Melee
        if gui_get_value(guid, 'Melee'){
          gui_set_value(guid, "Slash", floor(0.5+gui_get_value(guid, "Slash")) div 1);
          gui_set_value(guid, "Thrust", floor(0.5+gui_get_value(guid, "Thrust")) div 1);
          gui_set_value(guid, "Chained", floor(0.5+gui_get_value(guid, "Chained")) div 1);
          gui_set_value(guid, "Melee Ranged", floor(0.5+gui_get_value(guid, "Melee Ranged")) div 1);
          gui_set_value(guid, "Swiftness", floor(0.5+gui_get_value(guid, "Swiftness")) div 1);
          gui_set_value(guid, "Slowness", floor(0.5+gui_get_value(guid, "Slowness")) div 1);
          gui_set_value(guid, "Back Stab", floor(0.5+gui_get_value(guid, "Back Stab")) div 1);
          gui_set_value(guid, "Flail", floor(0.5+gui_get_value(guid, "Flail")) div 1);
          gui_set_value(guid, "Moveable", floor(0.5+gui_get_value(guid, "Moveable")) div 1);
          gui_set_value(guid, "Extend", floor(0.5+gui_get_value(guid, "Extend")) div 1);
          
        }
      //Range
        if gui_get_value(guid, 'Ranged'){
          gui_set_value(guid, "Sticky", floor(0.5+gui_get_value(guid, "Sticky")) div 1);
          gui_set_value(guid, "Bonus Shot", floor(0.5+gui_get_value(guid, "Bonus Shot")) div 1);
          gui_set_value(guid, "Mirror Shot", floor(0.5+gui_get_value(guid, "Mirror Shot")) div 1);
          gui_set_value(guid, "Multi Shot", floor(0.5+gui_get_value(guid, "Multi Shot")) div 1);
          gui_set_value(guid, "Burst", floor(0.5+gui_get_value(guid, "Burst"))div 1);
          gui_set_value(guid, "Inaccurate", floor(0.5+gui_get_value(guid, "Inaccurate"))div 1);
          gui_set_value(guid, "Cluster", floor(0.5+gui_get_value(guid, "Cluster")) div 1);
          gui_set_value(guid, "Boomerang", floor(0.5+gui_get_value(guid, "Boomerang")) div 1);
          gui_set_value(guid, "Nega-Rang", floor(0.5+gui_get_value(guid, "Nega-Rang")) div 1);
          gui_set_value(guid, "Ricochet", floor(0.5+gui_get_value(guid, "Ricochet")) div 1);
          gui_set_value(guid, "Seeking", floor(0.5+gui_get_value(guid, "Seeking")) div 1);
          gui_set_value(guid, "Guiding", floor(0.5+gui_get_value(guid, "Guiding")) div 1);
          gui_set_value(guid, "Laser", floor(0.5+gui_get_value(guid, "Laser")) div 1);
          gui_set_value(guid, "Targeting", floor(0.5+gui_get_value(guid, "Targeting")) div 1);
          gui_set_value(guid, "Air Strike", floor(0.5+gui_get_value(guid, "Air Strike")) div 1);
          gui_set_value(guid, "Arc Lightning", floor(0.5+gui_get_value(guid, "Arc Lightning")) div 1);
          gui_set_value(guid, "Quick Scope", floor(0.5+gui_get_value(guid, "Quick Scope")) div 1);
          
        }
      //Summon
        if gui_get_value(guid, 'Summon'){
          if gui_get_value(guid, 'Movement'){
           gui_set_value(guid, "Default Movement", floor(0.5+gui_get_value(guid, "Default Movement")) div 1); 
           gui_set_value(guid, "Orbital", floor(0.5+gui_get_value(guid, "Orbital")) div 1); 
           gui_set_value(guid, "Chained Movement", floor(0.5+gui_get_value(guid, "Chained Movement")) div 1); 
           gui_set_value(guid, "Jumpy", floor(0.5+gui_get_value(guid, "Jumpy")) div 1); 
           
          }
          if gui_get_value(guid, 'Attack'){
           gui_set_value(guid, "Leap", floor(0.5+gui_get_value(guid, "Leap")) div 1); 
           gui_set_value(guid, "Stomp", floor(0.5+gui_get_value(guid, "Stomp")) div 1); 
           gui_set_value(guid, "Hasten", floor(0.5+gui_get_value(guid, "Hasten")) div 1); 
           gui_set_value(guid, "Kamikaze", floor(0.5+gui_get_value(guid, "Kamikaze")) div 1); 
           
          }
          if gui_get_value(guid, 'Health'){
            gui_set_value(guid, "Default Health", floor(0.5+gui_get_value(guid, "Default Health")) div 1);
            gui_set_value(guid, "Stout", floor(0.5+gui_get_value(guid, "Stout")) div 1);
            gui_set_value(guid, "Enlarged", floor(0.5+gui_get_value(guid, "Enlarged")) div 1);
            gui_set_value(guid, "Timed", floor(0.5+gui_get_value(guid, "Timed")) div 1);
            gui_set_value(guid, "Multiply", floor(0.5+gui_get_value(guid, "Multiply")) div 1);
          }
          if gui_get_value(guid, 'Passive'){
            gui_set_value(guid, "Mount", floor(0.5+gui_get_value(guid, "Mount")) div 1);
          }
          
        }
      
      //Toy Mods
        if gui_get_value(guid, 'Toy Mods'){
          gui_set_value(guid, "Paint", floor(0.5+gui_get_value(guid, "Paint")) div 1); 
        }
      
      //Graphics
        if gui_get_value(guid, 'Graphics'){
          gui_set_value(guid, "room_speed", floor(0.5+gui_get_value(guid, "room_speed")) div 1); 
        }
      
      //Randomize
        if gui_get_value(guid, 'Random'){
          gui_set_value(guid, "Random Mod Count", floor(0.5+gui_get_value(guid, "Random Mod Count")) div 1); 
        }
        
      
      }
    }
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Apply Variables
if (global.debug = true){
  if (mouse_check_button_pressed(mb_left)){
    if (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)){
    
    //graphics
      if gui_get_value(guid, 'Graphics') || (update_debug = true){
        //adjust camera draw settings///////////////////
        obj_camera_control.smooth_camera = gui_get_value(guid, 'Smooth Camera');
        obj_camera_control.free_cam_mode = gui_get_value(guid, 'Free Cam');
              
        if obj_camera_control.smooth_camera != last_smooth {
          gui_set_gui(guid,
            204,
            17,
            70,
            32,
            2
            )

        }
        
        if (obj_camera_control.frame_rate != gui_get_value(guid, 'room_speed')){
          obj_camera_control.frame_rate = gui_get_value(guid, 'room_speed')
        }
      }
      ////////////////////////////////////////////////
      
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Controller Apply New Values [Modifiers]
if update_debug || (global.debug = true){
  //if (mouse_check_button_released(mb_left)){
    if (device_mouse_x_to_gui(0) &gt; (window_get_width()-243)) || (update_debug = true){
      
      if (gui_get_value(guid, 'Modifiers')
        &amp;&amp; (gui_get_value(guid, 'Global')
          || gui_get_value(guid, 'Ranged')
          || gui_get_value(guid, 'Melee')
          || gui_get_value(guid, 'Summon')
          || gui_get_value(guid, 'Toy Mods')
         )
      )
      || (update_debug = true)
      {
      
        for (var i = 0; i &lt; 3; i++){  //for all three weapons
          
          var queue_button_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_pre_weap_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_weap_spawn_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_proj_spawn_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_attack_step_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_pre_col_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_col_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          var queue_post_attack_mods = ds_priority_delete_min(obj_player.item_queues[i]);
          
          //Global
          if gui_get_value(guid, 'Global') || (update_debug = true){
            if update_debug || last_aoe != gui_get_value(guid, "AOE") scr_modifier_adjust(queue_col_mods, scr_mod_aoe, 2, gui_get_value(guid, "AOE"));
            if update_debug || last_continuous != gui_get_value(guid, "Continuous") scr_modifier_adjust(queue_col_mods, scr_mod_continuous, 1, gui_get_value(guid, "Continuous"));
            if update_debug || last_charge != gui_get_value(guid, "Charge") scr_modifier_adjust(queue_button_mods, scr_mod_charged, 1, gui_get_value(guid, "Charge"));
            if update_debug || last_repeater != gui_get_value(guid, "Repeater") scr_modifier_adjust(queue_button_mods, scr_mod_repeater, 2, gui_get_value(guid, "Repeater")); 
            if update_debug || last_dash != gui_get_value(guid, "Dash") scr_modifier_adjust(queue_pre_weap_mods, scr_mod_dash, 1, gui_get_value(guid, "Dash"));
            if update_debug || last_evade != gui_get_value(guid, "Evade") scr_modifier_adjust(queue_post_attack_mods, scr_mod_evade, 1, gui_get_value(guid, "Evade"));
            if update_debug || last_enlarge != gui_get_value(guid, "Enlarge") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_enlarge, 6, gui_get_value(guid, "Enlarge"));
            if update_debug || last_shrink != gui_get_value(guid, "Shrink") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_shrink, 7, gui_get_value(guid, "Shrink"));
            if update_debug || last_aimBot != gui_get_value(guid, "Aim Bot") scr_modifier_adjust(queue_pre_weap_mods, scr_mod_aimBot, 0, gui_get_value(guid, "Aim Bot"));
            if update_debug || last_knockback != gui_get_value(guid, "Knockback") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_knockback, 0, gui_get_value(guid, "Knockback"));
            
          }
          
          //Melee
          if gui_get_value(guid, 'Melee') || (update_debug = true){
            if update_debug || last_slash != gui_get_value(guid, "Slash") scr_modifier_adjust(queue_attack_step_mods, scr_mod_slash, 2, gui_get_value(guid, "Slash"));
            if update_debug || last_thrust != gui_get_value(guid, "Thrust") scr_modifier_adjust(queue_attack_step_mods, scr_mod_thrust, 3, gui_get_value(guid, "Thrust"));
            if update_debug || last_chained != gui_get_value(guid, "Chained") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_chained, 5, gui_get_value(guid, "Chained"));
            if update_debug || last_meleeRanged != gui_get_value(guid, "Melee Ranged") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_range, 8, gui_get_value(guid, "Melee Ranged"));
            if update_debug || last_swift != gui_get_value(guid, "Swiftness") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_swiftness, 2, gui_get_value(guid, "Swiftness"));
            if update_debug || last_slow != gui_get_value(guid, "Slowness") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_slowness, 3, gui_get_value(guid, "Slowness"));
            if update_debug || last_backStab != gui_get_value(guid, "Back Stab") scr_modifier_adjust(queue_weap_spawn_mods, scr_mod_backStab, 1, gui_get_value(guid, "Back Stab"));
            if update_debug || last_flail != gui_get_value(guid, "Flail") scr_modifier_adjust(queue_attack_step_mods, scr_mod_flail, 6, gui_get_value(guid, "Flail"));
            if update_debug || last_moveable != gui_get_value(guid, "Moveable") scr_modifier_adjust(queue_attack_step_mods, scr_mod_moveable, 7, gui_get_value(guid, "Moveable"));
            if update_debug || last_extend != gui_get_value(guid, "Extend") scr_modifier_adjust(queue_attack_step_mods, scr_mod_extend, 99, gui_get_value(guid, "Extend"));
            
          }
          
          //Ranged
          if gui_get_value(guid, 'Ranged') || (update_debug = true){
            if obj_player.item_data[i, weapon_type] = item_type_weapon_range{
              if update_debug || last_sticky != gui_get_value(guid, "Sticky") scr_modifier_adjust(queue_col_mods, scr_mod_sticky, 1, gui_get_value(guid, "Sticky"));
              if update_debug || last_bonusShot != gui_get_value(guid, "Bonus Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_bonusShot, 2, gui_get_value(guid, "Bonus Shot"));
              if update_debug || last_mirrorShot != gui_get_value(guid, "Mirror Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_mirrorShot, 3, gui_get_value(guid, "Mirror Shot"));
              if update_debug || last_multiShot != gui_get_value(guid, "Multi Shot") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_multishot, 4, gui_get_value(guid, "Multi Shot"));
              if update_debug || last_inaccurate != gui_get_value(guid, "Inaccurate") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_inaccurate, 98, gui_get_value(guid, "Inaccurate"));
              if update_debug || last_burst != gui_get_value(guid, "Burst") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_burst, 5, gui_get_value(guid, "Burst"));
              if update_debug || last_cluster != gui_get_value(guid, "Cluster") scr_modifier_adjust(queue_pre_col_mods, scr_mod_cluster, 3, gui_get_value(guid, "Cluster"));
              if update_debug || last_boomerang != gui_get_value(guid, "Boomerang") scr_modifier_adjust(queue_pre_col_mods, scr_mod_boomerang, 2, gui_get_value(guid, "Boomerang"));
              if update_debug || last_negarang != gui_get_value(guid, "Nega-Rang") scr_modifier_adjust(queue_col_mods, scr_mod_negarang, 1, gui_get_value(guid, "Nega-Rang"));
              if update_debug || last_ricochet != gui_get_value(guid, "Ricochet") scr_modifier_adjust(queue_pre_col_mods, scr_mod_ricochet, 1, gui_get_value(guid, "Ricochet"));
              if update_debug || last_seeking != gui_get_value(guid, "Seeking") scr_modifier_adjust(queue_attack_step_mods, scr_mod_seeking, 4, gui_get_value(guid, "Seeking"));
              if update_debug || last_guiding != gui_get_value(guid, "Guiding") scr_modifier_adjust(queue_attack_step_mods, scr_mod_guiding, 5, gui_get_value(guid, "Guiding"));
              if update_debug || last_laser != gui_get_value(guid, "Laser") scr_modifier_adjust(queue_attack_step_mods, scr_mod_laser, 5, gui_get_value(guid, "Laser"));
              if update_debug || last_targeting != gui_get_value(guid, "Targeting") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_targeting, 1, gui_get_value(guid, "Targeting"));
              if update_debug || last_airStrike != gui_get_value(guid, "Air Strike") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_airStrike, 99, gui_get_value(guid, "Air Strike"));
              if update_debug || last_arcLightning != gui_get_value(guid, "Arc Lightning") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_arcLightning, 98, gui_get_value(guid, "Arc Lightning"));
              if update_debug || last_quickScope != gui_get_value(guid, "Quick Scope") scr_modifier_adjust(queue_proj_spawn_mods, scr_mod_quickScope, 7, gui_get_value(guid, "Quick Scope"));
              
            }
          }
          
          //Summon
          if gui_get_value(guid, 'Summon') || (update_debug = true){
            //Movement
            if gui_get_value(guid, 'Movement') || (update_debug = true){
             if update_debug || last_defaultMovement != gui_get_value(guid, "Default Movement") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_walk, 1, gui_get_value(guid, "Default Movement"));
             if update_debug || last_orbital != gui_get_value(guid, "Orbital") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_orbital, 1, gui_get_value(guid, "Orbital"));
             if update_debug || last_chainedMovement != gui_get_value(guid, "Chained Movement") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_chained, 1, gui_get_value(guid, "Chained Movement"));
             if update_debug || last_jumpy != gui_get_value(guid, "Jumpy") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_movement_jumpy, 1, gui_get_value(guid, "Jumpy"));
             
            }
            //Attack
            if gui_get_value(guid, 'Attack') || (update_debug = true){
             if update_debug || last_leap != gui_get_value(guid, "Leap") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_leap, 1, gui_get_value(guid, "Leap"));
             if update_debug || last_stomp != gui_get_value(guid, "Stomp") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_stomp, 1, gui_get_value(guid, "Stomp"));
             if update_debug || last_hasten != gui_get_value(guid, "Hasten") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_hasten, 1, gui_get_value(guid, "Hasten"));
             if update_debug || last_kamikaze != gui_get_value(guid, "Kamikaze") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_attack_kamikaze, 1, gui_get_value(guid, "Kamikaze"));
             
            }
            //Health
            if gui_get_value(guid, 'Health') || (update_debug = true){
              if update_debug || last_defaultHealth != gui_get_value(guid, "Default Health") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_default, 1, gui_get_value(guid, "Default Health"));
              if update_debug || last_stoutHealth != gui_get_value(guid, "Stout") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_stout, 88, gui_get_value(guid, "Stout"));
              if update_debug || last_enlargedHealth != gui_get_value(guid, "Enlarged") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_enlarged, 2, gui_get_value(guid, "Enlarged"));
              if update_debug || last_timedHealth != gui_get_value(guid, "Timed") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_timed, 99, gui_get_value(guid, "Timed"));
              if update_debug || last_multiplyHealth != gui_get_value(guid, "Multiply") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_health_multiply, 3, gui_get_value(guid, "Multiply"));
              
            }
            //Passive
            if gui_get_value(guid, 'Passive') || (update_debug = true){
              if update_debug || last_mount != gui_get_value(guid, "Mount") scr_modifier_adjust(queue_attack_step_mods, scr_mod_summon_passive_mount, 99, gui_get_value(guid, "Mount"));
              
            }
            
          }
          
          //Toy Mods
          if gui_get_value(guid, 'Toy Mods') || (update_debug = true){
            //if obj_player.item_data[i, weapon_type] = item_type_weapon_range{
            if update_debug || last_paint != gui_get_value(guid, "Paint") scr_modifier_adjust(queue_col_mods, scr_mod_paint, 2, gui_get_value(guid, "Paint"));
          }
          
          ds_priority_add(obj_player.item_queues[i], queue_button_mods, 1);
          ds_priority_add(obj_player.item_queues[i], queue_pre_weap_mods, 2);
          ds_priority_add(obj_player.item_queues[i], queue_weap_spawn_mods, 3);
          ds_priority_add(obj_player.item_queues[i], queue_proj_spawn_mods, 4);
          ds_priority_add(obj_player.item_queues[i], queue_attack_step_mods, 5);
          ds_priority_add(obj_player.item_queues[i], queue_pre_col_mods, 6);
          ds_priority_add(obj_player.item_queues[i], queue_col_mods, 7);
          ds_priority_add(obj_player.item_queues[i], queue_post_attack_mods, 8);
        }
      }
      
    }
  //}
}

if (update_debug) update_debug = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update_debug = false
//update_debug = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_destroy_gui(guid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
frame_i++
if (frame_i &gt;= 250) {frame_i -= 250}

fps_grid[#0, frame_i] = fps_real
fps_mean = ds_grid_get_mean(fps_grid,0,0,0,240-1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///black box calculations

//for (var i = 0; i &lt; 8; i++)
//{
  //height = string_height(debug_string[i])
  //show_debug_player(i, "string height = "+string(height))
  //width = string_width(debug_string[i])
  //show_debug_player(i, "string width = "+string(width))

//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Display Controller

if (global.debug = true){
    draw_set_font(global.font_menu)
    gui_draw(guid, (display_get_gui_width()-gui_offset), 0);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Display Text

if (global.debug = true){
  draw_set_font(global.font_menu)
  var scale = 0.5 //obj_camera_control.upscale_val/2;
  
  if (global.numberOfLocalPlayers = 1){
     h = 40
     var xx = view_xport
     var yy = view_yport
     var width = string_width(debug_string[0])*scale
     draw_set_alpha(0.5)
     draw_set_color(c_dkgray)
     draw_rectangle(xx,yy+(h*scale), xx+width, yy+((h+string_height(debug_string[0]))*scale), 0)
     draw_set_alpha(1)
     draw_set_color(c_white)
     draw_text_transformed(xx,(yy+h*scale), debug_string[0], scale, scale, 0)
     
  }else{
    
    for (var i = 0; i &lt; global.numberOfLocalPlayers; i++){
      var xx = view_xport[i]
      var yy = view_yport[i]
      var width = string_width(debug_string[i])*scale
      //height = 
      
      if view_visible[i]{
        h = 40
        if (i = 0){
          draw_set_alpha(0.5)
          draw_set_color(c_dkgray)
          draw_rectangle(xx,yy+(h*scale), xx+width, yy+((h+string_height(debug_string[i]))*scale), 0)
          draw_set_alpha(1)
          draw_set_color(c_white)
          draw_text_transformed(xx,(yy+h*scale), debug_string[i], scale, scale, 0)
        } else {
          draw_set_alpha(0.5)
          draw_set_color(c_dkgray)
          draw_rectangle(xx,yy, xx+width, yy+(string_height(debug_string[i])*scale), 0)
          draw_set_alpha(1)
          draw_set_color(c_white)
          draw_text_transformed(xx,yy, debug_string[i], scale, scale, 0)
        }
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dont draw self
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug = true)
{
  global.debug = false
  show_debug_overlay(false)
} else {
  global.debug = true
  show_debug_overlay(true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
